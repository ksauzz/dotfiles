.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PARALLEL 1"
.TH PARALLEL 1 "2011-04-20" "20110422" "parallel"
.SH "NAME"
parallel \- build and execute shell command lines from standard input in parallel
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBparallel\fR [options] [\fIcommand\fR [arguments]] < list_of_arguments
.PP
\&\fBparallel\fR [options] [\fIcommand\fR [arguments]] \fB:::\fR arguments
.PP
\&\fBparallel\fR [options] [\fIcommand\fR [arguments]] \fB::::\fR argfile(s)
.PP
\&\fBparallel\fR \-\-semaphore [options] \fIcommand\fR
.PP
\&\fB#!/usr/bin/parallel\fR \-\-shebang [options] [\fIcommand\fR [arguments]]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1GNU\s0 \fBparallel\fR is a shell tool for executing jobs in parallel using one
or more computers. A job is can be a single command or a small script
that has to be run for each of the lines in the input. The typical
input is a list of files, a list of hosts, a list of users, a list of
URLs, or a list of tables. A job can also be a command that reads from
a pipe. \s-1GNU\s0 \fBparallel\fR can then split the input and pipe it into
commands in parallel.
.PP
If you use xargs and tee today you will find \s-1GNU\s0 \fBparallel\fR very easy to
use as \s-1GNU\s0 \fBparallel\fR is written to have the same options as xargs. If
you write loops in shell, you will find \s-1GNU\s0 \fBparallel\fR may be able to
replace most of the loops and make them run faster by running several
jobs in parallel.
.PP
\&\s-1GNU\s0 \fBparallel\fR makes sure output from the commands is the same output as
you would get had you run the commands sequentially. This makes it
possible to use output from \s-1GNU\s0 \fBparallel\fR as input for other programs.
.PP
For each line of input \s-1GNU\s0 \fBparallel\fR will execute \fIcommand\fR with
the line as arguments. If no \fIcommand\fR is given, the line of input is
executed. Several lines will be run in parallel. \s-1GNU\s0 \fBparallel\fR can
often be used as a substitute for \fBxargs\fR or \fBcat | bash\fR.
.PP
Before looking at the options you may want to check out the \fB\s-1EXAMPLE\s0\fRs
after the list of options. That will give you an idea of what \s-1GNU\s0
\&\fBparallel\fR is capable of.
.PP
You can also watch the intro video for a quick introduction:
http://www.youtube.com/watch?v=OpaiGYxkSuQ or at
http://tinyogg.com/watch/TORaR/ http://tinyogg.com/watch/hfxKj/ and
http://tinyogg.com/watch/YQuXd/
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fIcommand\fR" 9
.IX Item "command"
Command to execute.  If \fIcommand\fR or the following arguments contain
{} every instance will be substituted with the input line.
.Sp
If \fIcommand\fR is given, \s-1GNU\s0 \fBparallel\fR will behave similar to \fBxargs\fR. If
\&\fIcommand\fR is not given \s-1GNU\s0 \fBparallel\fR will behave similar to \fBcat | sh\fR.
.Sp
The \fIcommand\fR must be an executable, a script or a composed command: an
alias or a function will not work (see why
http://www.perlmonks.org/index.pl?node_id=484296).
.IP "\fB{}\fR" 9
.IX Item "{}"
Input line. This is the default replacement string and will normally
be used for putting the argument in the command line. It can be
changed with \fB\-I\fR.
.IP "\fB{.}\fR" 9
.IX Item "{.}"
Input line without extension. This is a specialized replacement string
with the extension removed. If the input line contains \fB.\fR after the
last \fB/\fR the last \fB.\fR till the end of the string will be removed and
\&\fB{.}\fR will be replaced with the remaining. E.g. \fIfoo.jpg\fR becomes
\&\fIfoo\fR, \fIsubdir/foo.jpg\fR becomes \fIsubdir/foo\fR, \fIsub.dir/foo.jpg\fR
becomes \fIsub.dir/foo\fR, \fIsub.dir/bar\fR remains \fIsub.dir/bar\fR. If the
input line does not contain \fB.\fR it will remain unchanged.
.Sp
\&\fB{.}\fR can be used the same places as \fB{}\fR. The replacement string
\&\fB{.}\fR can be changed with \fB\-U\fR.
.IP "\fB{/}\fR" 9
.IX Item "{/}"
Basename of input line. This is a specialized replacement string
with the directory part removed.
.Sp
\&\fB{/}\fR can be used the same places as \fB{}\fR. The replacement string
\&\fB{/}\fR can be changed with \fB\-\-basenamereplace\fR.
.IP "\fB{/.}\fR" 9
.IX Item "{/.}"
Basename of input line without extension. This is a specialized
replacement string with the directory and extension part removed. It
is a combination of \fB{/}\fR and \fB{.}\fR.
.Sp
\&\fB{/.}\fR can be used the same places as \fB{}\fR. The replacement string
\&\fB{/.}\fR can be changed with \fB\-\-basenameextensionreplace\fR.
.IP "\fB{#}\fR (alpha testing)" 9
.IX Item "{#} (alpha testing)"
Sequence number of the job to run. The same as \f(CW$PARALLEL_SEQ\fR.
.Sp
The replacement string \fB{#}\fR can be changed with \fB\-\-seqreplace\fR.
.IP "\fB{\fR\fIn\fR\fB}\fR" 9
.IX Item "{n}"
Argument from argument file \fIn\fR or the \fIn\fR'th argument. See \fB\-a\fR
and \fB\-N\fR.
.Sp
\&\fB{\fR\fIn\fR\fB}\fR can be used the same places as \fB{}\fR.
.IP "\fB{\fR\fIn\fR.\fB}\fR" 9
.IX Item "{n.}"
Argument from argument file \fIn\fR or the \fIn\fR'th argument without
extension. It is a combination of \fB{\fR\fIn\fR\fB}\fR and \fB{.}\fR.
.Sp
\&\fB{\fR\fIn\fR.\fB}\fR can be used the same places as \fB{\fR\fIn\fR\fB}\fR.
.IP "\fB{\fR\fIn\fR/\fB}\fR" 9
.IX Item "{n/}"
Basename of argument from argument file \fIn\fR or the \fIn\fR'th argument.
It is a combination of \fB{\fR\fIn\fR\fB}\fR and \fB{/}\fR.  See \fB\-a\fR and \fB\-N\fR.
.Sp
\&\fB{\fR\fIn\fR/\fB}\fR can be used the same places as \fB{\fR\fIn\fR\fB}\fR.
.IP "\fB{\fR\fIn\fR/.\fB}\fR" 9
.IX Item "{n/.}"
Basename of argument from argument file \fIn\fR or the \fIn\fR'th argument
without extension.  It is a combination of \fB{\fR\fIn\fR\fB}\fR, \fB{/}\fR, and
\&\fB{.}\fR.  See \fB\-a\fR and \fB\-N\fR.
.Sp
\&\fB{\fR\fIn\fR/.\fB}\fR can be used the same places as \fB{\fR\fIn\fR\fB}\fR.
.IP "\fB:::\fR \fIarguments\fR" 9
.IX Item "::: arguments"
Use arguments from the command line as input instead of from stdin
(standard input). Unlike other options for \s-1GNU\s0 \fBparallel\fR \fB:::\fR is
placed after the \fIcommand\fR and before the arguments.
.Sp
The following are equivalent:
.Sp
.Vb 6
\&  (echo file1; echo file2) | parallel gzip
\&  parallel gzip ::: file1 file2
\&  parallel gzip {} ::: file1 file2
\&  parallel --arg-sep ,, gzip {} ,, file1 file2
\&  parallel --arg-sep ,, gzip ,, file1 file2
\&  parallel ::: "gzip file1" "gzip file2"
.Ve
.Sp
To avoid treating \fB:::\fR as special use \fB\-\-arg\-sep\fR to set the
argument separator to something else. See also \fB\-\-arg\-sep\fR.
.Sp
stdin (standard input) will be passed to the first process run.
.Sp
If \fB\-\-arg\-file\fR is set arguments from that file will be appended.
.IP "\fB::::\fR \fIargfiles\fR" 9
.IX Item ":::: argfiles"
Another way to write \fB\-a\fR \fIargfile1\fR \fB\-a\fR \fIargfile2\fR ...
.Sp
See \fB\-a\fR.
.IP "\fB\-\-null\fR" 9
.IX Item "--null"
.PD 0
.IP "\fB\-0\fR" 9
.IX Item "-0"
.PD
Use \s-1NUL\s0 as delimiter.  Normally input lines will end in \en
(newline). If they end in \e0 (\s-1NUL\s0), then use this option. It is useful
for processing arguments that may contain \en (newline).
.IP "\fB\-\-arg\-file\fR \fIinput-file\fR" 9
.IX Item "--arg-file input-file"
.PD 0
.IP "\fB\-a\fR \fIinput-file\fR" 9
.IX Item "-a input-file"
.PD
Read items from the file \fIinput-file\fR instead of stdin (standard input).  If
you use this option, stdin is given to the first process run.
Otherwise, stdin is redirected from /dev/null.
.Sp
If multiple \fB\-a\fR are given, one line will be read from each of the
files. The arguments can be accessed in the command as \fB{1}\fR
\&.. \fB{\fR\fIn\fR\fB}\fR, so \fB{1}\fR will be a line from the first file, and
\&\fB{6}\fR will refer to the line with the same line number from the 6th
file.
.IP "\fB\-\-arg\-file\-sep\fR \fIsep-str\fR" 9
.IX Item "--arg-file-sep sep-str"
Use \fIsep-str\fR instead of \fB::::\fR as separator string between command
and argument files. Useful if \fB::::\fR is used for something else by the
command.
.Sp
See also: \fB::::\fR.
.IP "\fB\-\-arg\-sep\fR \fIsep-str\fR" 9
.IX Item "--arg-sep sep-str"
Use \fIsep-str\fR instead of \fB:::\fR as separator string. Useful if \fB:::\fR
is used for something else by the command.
.Sp
Also useful if you command uses \fB:::\fR but you still want to read
arguments from stdin (standard input): Simply change \fB\-\-arg\-sep\fR to a
string that is not in the command line.
.Sp
See also: \fB:::\fR.
.IP "\fB\-\-basefile\fR \fIfile\fR" 9
.IX Item "--basefile file"
.PD 0
.IP "\fB\-B\fR \fIfile\fR" 9
.IX Item "-B file"
.PD
\&\fIfile\fR will be transferred to each sshlogin before a jobs is
started. It will be removed if \fB\-\-cleanup\fR is active. The file may be
a script to run or some common base data needed for the jobs.
Multiple \fB\-B\fR can be specified to transfer more basefiles. The
\&\fIfile\fR will be transferred the same way as \fB\-\-transfer\fR.
.IP "\fB\-\-basenamereplace\fR \fIreplace-str\fR" 9
.IX Item "--basenamereplace replace-str"
.PD 0
.IP "\fB\-\-bnr\fR \fIreplace-str\fR" 9
.IX Item "--bnr replace-str"
.PD
Use the replacement string \fIreplace-str\fR instead of \fB{/}\fR for
basename of input line.
.IP "\fB\-\-basenameextensionreplace\fR \fIreplace-str\fR" 9
.IX Item "--basenameextensionreplace replace-str"
Use the replacement string \fIreplace-str\fR instead of \fB{/.}\fR for basename of input line without extension.
.IP "\fB\-\-bg\fR (beta testing)" 9
.IX Item "--bg (beta testing)"
Run command in background thus \s-1GNU\s0 \fBparallel\fR will not wait for
completion of the command before exiting. This is the default if
\&\fB\-\-semaphore\fR is set.
.Sp
See also: \fB\-\-fg\fR
.Sp
Implies \fB\-\-semaphore\fR.
.IP "\fB\-\-block\fR \fIsize\fR (beta testing)" 9
.IX Item "--block size (beta testing)"
.PD 0
.IP "\fB\-\-block\-size\fR \fIsize\fR (beta testing)" 9
.IX Item "--block-size size (beta testing)"
.PD
Size of block in bytes. The size can be postfixed with K, M, G, or T
which would multiply the size with 1024, 1048576, 1073741824, or
1099511627776 respectively.
.Sp
\&\s-1GNU\s0 \fBparallel\fR tries to meet the block size but can be off by the
length of one record.
.Sp
\&\fIsize\fR defaults to 1M.
.Sp
See \fB\-\-pipe\fR for use of this.
.IP "\fB\-\-cleanup\fR" 9
.IX Item "--cleanup"
Remove transferred files. \fB\-\-cleanup\fR will remove the transferred files
on the remote computer after processing is done.
.Sp
.Vb 3
\&  find log -name '*gz' | parallel \e
\&    --sshlogin server.example.com --transfer --return {.}.bz2 \e
\&    --cleanup "zcat {} | bzip -9 >{.}.bz2"
.Ve
.Sp
With \fB\-\-transfer\fR the file transferred to the remote computer will be
removed on the remote computer.  Directories created will not be removed
\&\- even if they are empty.
.Sp
With \fB\-\-return\fR the file transferred from the remote computer will be
removed on the remote computer.  Directories created will not be removed
\&\- even if they are empty.
.Sp
\&\fB\-\-cleanup\fR is ignored when not used with \fB\-\-transfer\fR or \fB\-\-return\fR.
.IP "\fB\-\-colsep\fR \fIregexp\fR" 9
.IX Item "--colsep regexp"
.PD 0
.IP "\fB\-C\fR \fIregexp\fR" 9
.IX Item "-C regexp"
.PD
Column separator. The input will be treated as a table with \fIregexp\fR
separating the columns. The n'th column can be access using
\&\fB{\fR\fIn\fR\fB}\fR or \fB{\fR\fIn\fR.\fB}\fR. E.g. \fB{3}\fR is the 3rd column.
.Sp
\&\fB\-\-colsep\fR implies \fB\-\-trim rl\fR.
.Sp
\&\fIregexp\fR is a Perl Regular Expression:
http://perldoc.perl.org/perlre.html
.IP "\fB\-\-delimiter\fR \fIdelim\fR" 9
.IX Item "--delimiter delim"
.PD 0
.IP "\fB\-d\fR \fIdelim\fR" 9
.IX Item "-d delim"
.PD
Input items are terminated by the specified character.  Quotes and
backslash are not special; every character in the input is taken
literally.  Disables the end-of-file string, which is treated like any
other argument.  This can be used when the input consists of simply
newline-separated items, although it is almost always better to design
your program to use \-\-null where this is possible.  The specified
delimiter may be a single character, a C\-style character escape such
as \en, or an octal or hexadecimal escape code.  Octal and
hexadecimal escape codes are understood as for the printf command.
Multibyte characters are not supported.
.IP "\fB\-E\fR \fIeof-str\fR" 9
.IX Item "-E eof-str"
Set the end of file string to eof\-str.  If the end of file string
occurs as a line of input, the rest of the input is ignored.  If
neither \fB\-E\fR nor \fB\-e\fR is used, no end of file string is used.
.IP "\fB\-\-dry\-run\fR" 9
.IX Item "--dry-run"
Print the job to run on standard output, but do not run the job. Use
\&\fB\-v \-v\fR to include the ssh/rsync wrapping if the job would be run on
a remote computer. Do not count on this literaly, though, as the job
may be scheduled on another computer or the local computer if : is in
the list.
.IP "\fB\-\-eof\fR[=\fIeof-str\fR]" 9
.IX Item "--eof[=eof-str]"
.PD 0
.IP "\fB\-e\fR[\fIeof-str\fR]" 9
.IX Item "-e[eof-str]"
.PD
This option is a synonym for the \fB\-E\fR option.  Use \fB\-E\fR instead,
because it is \s-1POSIX\s0 compliant for \fBxargs\fR while this option is not.
If \fIeof-str\fR is omitted, there is no end of file string.  If neither
\&\fB\-E\fR nor \fB\-e\fR is used, no end of file string is used.
.IP "\fB\-\-eta\fR (alpha testing)" 9
.IX Item "--eta (alpha testing)"
Show the estimated number of seconds before finishing. This forces \s-1GNU\s0
\&\fBparallel\fR to read all jobs before starting to find the number of
jobs. \s-1GNU\s0 \fBparallel\fR normally only reads the next job to run.
Implies \fB\-\-progress\fR.
.IP "\fB\-\-fg\fR (beta testing)" 9
.IX Item "--fg (beta testing)"
Run command in foreground thus \s-1GNU\s0 \fBparallel\fR will wait for
completion of the command before exiting.
.Sp
See also: \fB\-\-bg\fR
.Sp
Implies \fB\-\-semaphore\fR.
.IP "\fB\-\-gnu\fR" 9
.IX Item "--gnu"
Behave like \s-1GNU\s0 \fBparallel\fR. If \fB\-\-tollef\fR and \fB\-\-gnu\fR are both set,
\&\fB\-\-gnu\fR takes precedence.
.IP "\fB\-\-group\fR" 9
.IX Item "--group"
.PD 0
.IP "\fB\-g\fR" 9
.IX Item "-g"
.PD
Group output.  Output from each jobs is grouped together and is only
printed when the command is finished. \s-1STDERR\s0 first followed by \s-1STDOUT\s0.
\&\fB\-g\fR is the default. Can be reversed with \fB\-u\fR.
.IP "\fB\-\-help\fR" 9
.IX Item "--help"
.PD 0
.IP "\fB\-h\fR" 9
.IX Item "-h"
.PD
Print a summary of the options to \s-1GNU\s0 \fBparallel\fR and exit.
.IP "\fB\-\-halt\-on\-error\fR <0|1|2>" 9
.IX Item "--halt-on-error <0|1|2>"
.PD 0
.IP "\fB\-H\fR <0|1|2>" 9
.IX Item "-H <0|1|2>"
.RS 9
.IP "0" 3
.PD
Do not halt if a job fails. Exit status will be the number of jobs
failed. This is the default.
.IP "1" 3
.IX Item "1"
Do not start new jobs if a job fails, but complete the running jobs
including cleanup. The exit status will be the exit status from the
last failing job.
.IP "2" 3
.IX Item "2"
Kill off all jobs immediately and exit without cleanup. The exit
status will be the exit status from the failing job.
.RE
.RS 9
.RE
.IP "\fB\-I\fR \fIreplace-str\fR" 9
.IX Item "-I replace-str"
Use the replacement string \fIreplace-str\fR instead of {}.
.IP "\fB\-\-replace\fR[=\fIreplace-str\fR]" 9
.IX Item "--replace[=replace-str]"
.PD 0
.IP "\fB\-i\fR[\fIreplace-str\fR]" 9
.IX Item "-i[replace-str]"
.PD
This option is a synonym for \fB\-I\fR\fIreplace-str\fR if \fIreplace-str\fR is
specified, and for \fB\-I\fR{} otherwise.  This option is deprecated;
use \fB\-I\fR instead.
.IP "\fB\-\-joblog\fR \fIlogfile\fR (beta testing)" 9
.IX Item "--joblog logfile (beta testing)"
Logfile for executed jobs. Saved a list of the executed jobs to
\&\fIlogfile\fR in the following \s-1TAB\s0 separated format: sequence number,
sshlogin, start time as seconds since epoch, run time in seconds,
bytes in files transfered, bytes in files returned, exit status,
and command run.
.Sp
To convert the times into \s-1ISO\-8601\s0 strict do:
.Sp
\&\fBperl \-a \-F\*(L"\et\*(R" \-ne 'chomp($F[2]=`date \-d \e@$F[2] +%FT%T`); print join(\*(L"\et\*(R",@F)'\fR
.IP "\fB\-\-jobs\fR \fIN\fR" 9
.IX Item "--jobs N"
.PD 0
.IP "\fB\-j\fR \fIN\fR" 9
.IX Item "-j N"
.IP "\fB\-\-max\-procs\fR \fIN\fR" 9
.IX Item "--max-procs N"
.IP "\fB\-P\fR \fIN\fR" 9
.IX Item "-P N"
.PD
Number of jobslots. Run up to N jobs in parallel.  0 means as many as
possible. Default is 100% which will run one job per \s-1CPU\s0 core.
.Sp
If \fB\-\-semaphore\fR is set default is 1 thus making a mutex.
.IP "\fB\-\-jobs\fR \fI+N\fR" 9
.IX Item "--jobs +N"
.PD 0
.IP "\fB\-j\fR \fI+N\fR" 9
.IX Item "-j +N"
.IP "\fB\-\-max\-procs\fR \fI+N\fR" 9
.IX Item "--max-procs +N"
.IP "\fB\-P\fR \fI+N\fR" 9
.IX Item "-P +N"
.PD
Add N to the number of \s-1CPU\s0 cores.  Run this many jobs in parallel. For
compute intensive jobs \fB\-j\fR +0 is useful as it will run
number-of-cpu-cores jobs simultaneously. See also
\&\fB\-\-use\-cpus\-instead\-of\-cores\fR.
.IP "\fB\-\-jobs\fR \fI\-N\fR" 9
.IX Item "--jobs -N"
.PD 0
.IP "\fB\-j\fR \fI\-N\fR" 9
.IX Item "-j -N"
.IP "\fB\-\-max\-procs\fR \fI\-N\fR" 9
.IX Item "--max-procs -N"
.IP "\fB\-P\fR \fI\-N\fR" 9
.IX Item "-P -N"
.PD
Subtract N from the number of \s-1CPU\s0 cores.  Run this many jobs in parallel.
If the evaluated number is less than 1 then 1 will be used.  See also
\&\fB\-\-use\-cpus\-instead\-of\-cores\fR.
.IP "\fB\-\-jobs\fR \fIN\fR%" 9
.IX Item "--jobs N%"
.PD 0
.IP "\fB\-j\fR \fIN\fR%" 9
.IX Item "-j N%"
.IP "\fB\-\-max\-procs\fR \fIN\fR%" 9
.IX Item "--max-procs N%"
.IP "\fB\-P\fR \fIN\fR%" 9
.IX Item "-P N%"
.PD
Multiply N% with the number of \s-1CPU\s0 cores.  Run this many jobs in parallel.
If the evaluated number is less than 1 then 1 will be used.  See also
\&\fB\-\-use\-cpus\-instead\-of\-cores\fR.
.IP "\fB\-\-jobs\fR \fIprocfile\fR" 9
.IX Item "--jobs procfile"
.PD 0
.IP "\fB\-j\fR \fIprocfile\fR" 9
.IX Item "-j procfile"
.IP "\fB\-\-max\-procs\fR \fIprocfile\fR" 9
.IX Item "--max-procs procfile"
.IP "\fB\-P\fR \fIprocfile\fR" 9
.IX Item "-P procfile"
.PD
Read parameter from file. Use the content of \fIprocfile\fR as parameter
for \fI\-j\fR. E.g. \fIprocfile\fR could contain the string 100% or +2 or
10. If \fIprocfile\fR is changed when a job completes, \fIprocfile\fR is
read again and the new number of jobs is computed. If the number is
lower than before, running jobs will be allowed to finish but new jobs
will not be started until the wanted number of jobs has been reached.
This makes it possible to change the number of simultaneous running
jobs while \s-1GNU\s0 \fBparallel\fR is running.
.IP "\fB\-\-keeporder\fR" 9
.IX Item "--keeporder"
.PD 0
.IP "\fB\-k\fR" 9
.IX Item "-k"
.PD
Keep sequence of output same as the order of input. If jobs 1 2 3 4
end in the sequence 3 1 4 2 the output will still be 1 2 3 4.
.IP "\fB\-L\fR \fImax-lines\fR" 9
.IX Item "-L max-lines"
Use at most \fImax-lines\fR nonblank input lines per command line.
Trailing blanks cause an input line to be logically continued on the
next input line.
.Sp
\&\fB\-L 0\fR means read one line, but insert 0 arguments on the command
line.
.Sp
Implies \fB\-X\fR unless \fB\-m\fR is set.
.IP "\fB\-\-max\-lines\fR[=\fImax-lines\fR]" 9
.IX Item "--max-lines[=max-lines]"
.PD 0
.IP "\fB\-l\fR[\fImax-lines\fR]" 9
.IX Item "-l[max-lines]"
.PD
Synonym for the \fB\-L\fR option.  Unlike \fB\-L\fR, the \fImax-lines\fR argument
is optional.  If \fImax-lines\fR is not specified, it defaults to one.
The \fB\-l\fR option is deprecated since the \s-1POSIX\s0 standard specifies
\&\fB\-L\fR instead.
.Sp
\&\fB\-l 0\fR is an alias for \fB\-l 1\fR.
.Sp
Implies \fB\-X\fR unless \fB\-m\fR is set.
.IP "\fB\-\-load\fR \fImax-load\fR (experimental)" 9
.IX Item "--load max-load (experimental)"
Do not start new jobs on a given computer unless the load is less than
\&\fImax-load\fR. \fImax-load\fR uses the same syntax as \fB\-\-jobs\fR, so \fI100%\fR
for one per \s-1CPU\s0 is a valid setting.
.Sp
The load average is only sampled every 10 seconds to avoid stressing
small computers.
.IP "\fB\-\-controlmaster\fR (experimental)" 9
.IX Item "--controlmaster (experimental)"
.PD 0
.IP "\fB\-M\fR (experimental)" 9
.IX Item "-M (experimental)"
.PD
Use ssh's ControlMaster to make ssh connections faster. Useful if jobs
run remote and are very fast to run. This is disabled for sshlogins
that specify their own ssh command.
.IP "\fB\-\-xargs\fR" 9
.IX Item "--xargs"
.PD 0
.IP "\fB\-m\fR" 9
.IX Item "-m"
.PD
Multiple. Insert as many arguments as the command line length
permits. If \fB{}\fR is not used the arguments will be appended to the
line.  If \fB{}\fR is used multiple times each \fB{}\fR will be replaced
with all the arguments.
.Sp
Support for \fB\-m\fR with \fB\-\-sshlogin\fR is limited and may fail.
.Sp
See also \fB\-X\fR for context replace. If in doubt use \fB\-X\fR as that will
most likely do what is needed.
.IP "\fB\-\-output\-as\-files\fR (beta testing)" 9
.IX Item "--output-as-files (beta testing)"
.PD 0
.IP "\fB\-\-outputasfiles\fR (beta testing)" 9
.IX Item "--outputasfiles (beta testing)"
.IP "\fB\-\-files\fR (beta testing)" 9
.IX Item "--files (beta testing)"
.PD
Instead of printing the output to stdout (standard output) the output
of each job is saved in a file and the filename is then printed.
.IP "\fB\-\-pipe\fR (beta testing)" 9
.IX Item "--pipe (beta testing)"
.PD 0
.IP "\fB\-\-spreadstdin\fR (beta testing)" 9
.IX Item "--spreadstdin (beta testing)"
.PD
Spread input to jobs on stdin. Read a block of data from stdin
(standard input) and give one block of data as input to one job.
.Sp
The block size is determined by \fB\-\-block\fR. The strings \fB\-\-recstart\fR
and \fB\-\-recend\fR tell \s-1GNU\s0 \fBparallel\fR how a record starts and/or
ends. The block read will have the final partial record removed before
the block is passed on to the job. The partial record will be
prepended to next block.
.Sp
If \fB\-\-recstart\fR is given this will be used to split at record start.
.Sp
If \fB\-\-recend\fR is given this will be used to split at record end.
.Sp
If both \fB\-\-recstart\fR and \fB\-\-recend\fR are given both will have to
match to find a split position.
.Sp
If neither \fB\-\-recstart\fR nor \fB\-\-recend\fR are given \fB\-\-recend\fR
defaults to '\en'. To have no record separator use \fB\-\-recend ""\fR.
.Sp
\&\fB\-\-files\fR is often used with \fB\-\-pipe\fR.
.IP "\fB\-\-progress\fR" 9
.IX Item "--progress"
Show progress of computations. List the computers involved in the task
with number of \s-1CPU\s0 cores detected and the max number of jobs to
run. After that show progress for each computer: number of running
jobs, number of completed jobs, and percentage of all jobs done by
this computer. The percentage will only be available after all jobs
have been scheduled as \s-1GNU\s0 \fBparallel\fR only read the next job when
ready to schedule it \- this is to avoid wasting time and memory by
reading everything at startup.
.Sp
By sending \s-1GNU\s0 \fBparallel\fR \s-1SIGUSR2\s0 you can toggle turning on/off
\&\fB\-\-progress\fR on a running \s-1GNU\s0 \fBparallel\fR process.
.IP "\fB\-\-max\-args\fR=\fImax-args\fR" 9
.IX Item "--max-args=max-args"
.PD 0
.IP "\fB\-n\fR \fImax-args\fR" 9
.IX Item "-n max-args"
.PD
Use at most \fImax-args\fR arguments per command line.  Fewer than
\&\fImax-args\fR arguments will be used if the size (see the \fB\-s\fR option)
is exceeded, unless the \fB\-x\fR option is given, in which case
\&\s-1GNU\s0 \fBparallel\fR will exit.
.Sp
\&\fB\-n 0\fR means read one argument, but insert 0 arguments on the command
line.
.Sp
Implies \fB\-X\fR unless \fB\-m\fR is set.
.IP "\fB\-\-max\-replace\-args\fR=\fImax-args\fR" 9
.IX Item "--max-replace-args=max-args"
.PD 0
.IP "\fB\-N\fR \fImax-args\fR" 9
.IX Item "-N max-args"
.PD
Use at most \fImax-args\fR arguments per command line. Like \fB\-n\fR but
also makes replacement strings \fB{1}\fR .. \fB{\fR\fImax-args\fR\fB}\fR that
represents argument 1 .. \fImax-args\fR. If too few args the \fB{\fR\fIn\fR\fB}\fR will
be empty.
.Sp
\&\fB\-N 0\fR means read one argument, but insert 0 arguments on the command
line.
.Sp
This will set the owner of the homedir to the user:
.Sp
\&\fBtr ':' '\e012' < /etc/passwd | parallel \-N7 chown {1} {6}\fR
.Sp
Implies \fB\-X\fR unless \fB\-m\fR or <\-\-pipe> is set.
.Sp
When used with \fB\-\-pipe\fR \fB\-N\fR is the number of records to read. This
is much slower than \fB\-\-blocksize\fR so avoid it if performance is
important.
.IP "\fB\-\-max\-line\-length\-allowed\fR" 9
.IX Item "--max-line-length-allowed"
Print the maximal number characters allowed on the command line and
exit (used by \s-1GNU\s0 \fBparallel\fR itself to determine the line length
on remote computers).
.IP "\fB\-\-number\-of\-cpus\fR" 9
.IX Item "--number-of-cpus"
Print the number of physical CPUs and exit (used by \s-1GNU\s0 \fBparallel\fR
itself to determine the number of physical CPUs on remote computers).
.IP "\fB\-\-number\-of\-cores\fR" 9
.IX Item "--number-of-cores"
Print the number of \s-1CPU\s0 cores and exit (used by \s-1GNU\s0 \fBparallel\fR itself
to determine the number of \s-1CPU\s0 cores on remote computers).
.IP "\fB\-\-nice\fR \fIniceness\fR" 9
.IX Item "--nice niceness"
Run the command at this niceness. For simple commands you can just add
\&\fBnice\fR in front of the command. But if the command consists of more
sub commands (Like: ls|wc) then prepending \fBnice\fR will not always
work. \fB\-\-nice\fR will make sure all sub commands are niced.
.IP "\fB\-\-interactive\fR" 9
.IX Item "--interactive"
.PD 0
.IP "\fB\-p\fR" 9
.IX Item "-p"
.PD
Prompt the user about whether to run each command line and read a line
from the terminal.  Only run the command line if the response starts
with 'y' or 'Y'.  Implies \fB\-t\fR.
.IP "\fB\-\-profile\fR \fIprofilename\fR" 9
.IX Item "--profile profilename"
.PD 0
.IP "\fB\-J\fR \fIprofilename\fR" 9
.IX Item "-J profilename"
.PD
Use profile \fIprofilename\fR for options. This is useful if you want to
have multiple profiles. You could have one profile for running jobs in
parallel on the local computer and a different profile for running jobs
on remote computers. See the section \s-1PROFILE\s0 \s-1FILES\s0 for examples.
.Sp
\&\fIprofilename\fR corresponds to the file ~/.parallel/\fIprofilename\fR.
.Sp
Default: config
.IP "\fB\-\-quote\fR" 9
.IX Item "--quote"
.PD 0
.IP "\fB\-q\fR" 9
.IX Item "-q"
.PD
Quote \fIcommand\fR.  This will quote the command line so special
characters are not interpreted by the shell. See the section
\&\s-1QUOTING\s0. Most people will never need this.  Quoting is disabled by
default.
.IP "\fB\-\-no\-run\-if\-empty\fR" 9
.IX Item "--no-run-if-empty"
.PD 0
.IP "\fB\-r\fR" 9
.IX Item "-r"
.PD
If the stdin (standard input) only contains whitespace, do not run the command.
.IP "\fB\-\-recstart\fR \fIstartstring\fR (beta testing)" 9
.IX Item "--recstart startstring (beta testing)"
.PD 0
.IP "\fB\-\-recend\fR \fIendstring\fR (beta testing)" 9
.IX Item "--recend endstring (beta testing)"
.PD
If \fB\-\-recstart\fR is given \fIstartstring\fR will be used to split at record start.
.Sp
If \fB\-\-recend\fR is given \fIendstring\fR will be used to split at record end.
.Sp
If both \fB\-\-recstart\fR and \fB\-\-recend\fR are given the string
\&\fIstartstring\fR\fIendstring\fR will have to match to find a split
position. This is useful if either \fIstartstring\fR or \fIendstring\fR
match in the middle of a record.
.Sp
If neither \fB\-\-recstart\fR nor \fB\-\-recend\fR are given then \fB\-\-recend\fR
defaults to '\en'. To have no record separator use \fB\-\-recend ""\fR.
.Sp
\&\fB\-\-recstart\fR and \fB\-\-recend\fR are used with \fB\-\-pipe\fR.
.Sp
Use \fB\-\-regexp\fR to interpret \fB\-\-recstart\fR and \fB\-\-recend\fR as regular
expressions. This is slow, however.
.IP "\fB\-\-regexp\fR (beta test)" 9
.IX Item "--regexp (beta test)"
Use \fB\-\-regexp\fR to interpret \fB\-\-recstart\fR and \fB\-\-recend\fR as regular
expressions. This is slow, however.
.IP "\fB\-\-remove\-rec\-sep\fR (beta testing)" 9
.IX Item "--remove-rec-sep (beta testing)"
.PD 0
.IP "\fB\-\-removerecsep\fR (beta testing)" 9
.IX Item "--removerecsep (beta testing)"
.IP "\fB\-\-rrs\fR (beta testing)" 9
.IX Item "--rrs (beta testing)"
.PD
Remove the text matched by \fB\-\-recstart\fR and \fB\-\-recend\fR before piping
it to the command.
.Sp
Only used with \fB\-\-pipe\fR.
.IP "\fB\-\-retries\fR \fIn\fR (beta testing)" 9
.IX Item "--retries n (beta testing)"
If a job fails, retry it on another computer. Do this \fIn\fR times. If
there are fewer than \fIn\fR computers in \fB\-\-sshlogin\fR \s-1GNU\s0 parallel will
re-use the computers. This is useful if some jobs fail for no apparent
reason (such as network failure).
.IP "\fB\-\-return\fR \fIfilename\fR" 9
.IX Item "--return filename"
Transfer files from remote computers. \fB\-\-return\fR is used with
\&\fB\-\-sshlogin\fR when the arguments are files on the remote computers. When
processing is done the file \fIfilename\fR will be transferred
from the remote computer using \fBrsync\fR and will be put relative to
the default login dir. E.g.
.Sp
.Vb 2
\&  echo foo/bar.txt | parallel \e
\&    --sshlogin server.example.com --return {.}.out touch {.}.out
.Ve
.Sp
This will transfer the file \fI$HOME/foo/bar.out\fR from the computer
\&\fIserver.example.com\fR to the file \fIfoo/bar.out\fR after running
\&\fBtouch foo/bar.out\fR on \fIserver.example.com\fR.
.Sp
.Vb 2
\&  echo /tmp/foo/bar.txt | parallel \e
\&    --sshlogin server.example.com --return {.}.out touch {.}.out
.Ve
.Sp
This will transfer the file \fI/tmp/foo/bar.out\fR from the computer
\&\fIserver.example.com\fR to the file \fI/tmp/foo/bar.out\fR after running
\&\fBtouch /tmp/foo/bar.out\fR on \fIserver.example.com\fR.
.Sp
Multiple files can be transferred by repeating the options multiple
times:
.Sp
.Vb 3
\&  echo /tmp/foo/bar.txt | \e
\&    parallel --sshlogin server.example.com \e
\&    --return {.}.out --return {.}.out2 touch {.}.out {.}.out2
.Ve
.Sp
\&\fB\-\-return\fR is often used with \fB\-\-transfer\fR and \fB\-\-cleanup\fR.
.Sp
\&\fB\-\-return\fR is ignored when used with \fB\-\-sshlogin :\fR or when not used
with \fB\-\-sshlogin\fR.
.IP "\fB\-\-max\-chars\fR=\fImax-chars\fR" 9
.IX Item "--max-chars=max-chars"
.PD 0
.IP "\fB\-s\fR \fImax-chars\fR" 9
.IX Item "-s max-chars"
.PD
Use at most \fImax-chars\fR characters per command line, including the
command and initial-arguments and the terminating nulls at the ends of
the argument strings.  The largest allowed value is system\-dependent,
and is calculated as the argument length limit for exec, less the size
of your environment.  The default value is the maximum.
.Sp
Implies \fB\-X\fR unless \fB\-m\fR is set.
.IP "\fB\-\-show\-limits\fR" 9
.IX Item "--show-limits"
Display the limits on the command-line length which are imposed by the
operating system and the \fB\-s\fR option.  Pipe the input from /dev/null
(and perhaps specify \-\-no\-run\-if\-empty) if you don't want \s-1GNU\s0 \fBparallel\fR
to do anything.
.IP "\fB\-\-semaphore\fR" 9
.IX Item "--semaphore"
Work as a counting semaphore. \fB\-\-semaphore\fR will cause \s-1GNU\s0
\&\fBparallel\fR to start \fIcommand\fR in the background. When the number of
simultaneous jobs is reached, \s-1GNU\s0 \fBparallel\fR will wait for one of
these to complete before starting another command.
.Sp
\&\fB\-\-semaphore\fR implies \fB\-\-bg\fR unless \fB\-\-fg\fR is specified.
.Sp
\&\fB\-\-semaphore\fR implies \fB\-\-semaphorename `tty`\fR unless
\&\fB\-\-semaphorename\fR is specified.
.Sp
Used with \fB\-\-fg\fR, \fB\-\-wait\fR, and \fB\-\-semaphorename\fR.
.Sp
The command \fBsem\fR is an alias for \fBparallel \-\-semaphore\fR.
.IP "\fB\-\-semaphorename\fR \fIname\fR" 9
.IX Item "--semaphorename name"
.PD 0
.IP "\fB\-\-id\fR \fIname\fR" 9
.IX Item "--id name"
.PD
The name of the semaphore to use. The semaphore can be shared between
multiple processes.
.Sp
Implies \fB\-\-semaphore\fR.
.IP "\fB\-\-semaphoretimeout\fR \fIsecs\fR (not implemented)" 9
.IX Item "--semaphoretimeout secs (not implemented)"
If the semaphore is not released within secs seconds, take it anyway.
.Sp
Implies \fB\-\-semaphore\fR.
.IP "\fB\-\-seqreplace\fR \fIreplace-str\fR" 9
.IX Item "--seqreplace replace-str"
Use the replacement string \fIreplace-str\fR instead of \fB{#}\fR for
job sequence number.
.IP "\fB\-\-skip\-first\-line\fR" 9
.IX Item "--skip-first-line"
Do not use the first line of input (used by \s-1GNU\s0 \fBparallel\fR itself
when called with \fB\-\-shebang\fR).
.IP "\fB\-S\fR \fI[ncpu/]sshlogin[,[ncpu/]sshlogin[,...]]\fR" 9
.IX Item "-S [ncpu/]sshlogin[,[ncpu/]sshlogin[,...]]"
.PD 0
.IP "\fB\-\-sshlogin\fR \fI[ncpu/]sshlogin[,[ncpu/]sshlogin[,...]]\fR" 9
.IX Item "--sshlogin [ncpu/]sshlogin[,[ncpu/]sshlogin[,...]]"
.PD
Distribute jobs to remote computers. The jobs will be run on a list of
remote computers.  \s-1GNU\s0 \fBparallel\fR will determine the number of \s-1CPU\s0
cores on the remote computers and run the number of jobs as specified by
\&\fB\-j\fR.  If the number \fIncpu\fR is given \s-1GNU\s0 \fBparallel\fR will use this
number for number of \s-1CPU\s0 cores on the host. Normally \fIncpu\fR will not
be needed.
.Sp
An \fIsshlogin\fR is of the form:
.Sp
.Vb 1
\&  [sshcommand [options]][username@]hostname
.Ve
.Sp
The sshlogin must not require a password.
.Sp
The sshlogin ':' is special, it means 'no ssh' and will therefore run
on the local computer.
.Sp
The sshlogin '..' is special, it read sshlogins from ~/.parallel/sshloginfile
.Sp
To specify more sshlogins separate the sshlogins by comma or repeat
the options multiple times.
.Sp
For examples: see \fB\-\-sshloginfile\fR.
.Sp
The remote host must have \s-1GNU\s0 \fBparallel\fR installed.
.Sp
\&\fB\-\-sshlogin\fR is known to cause problems with \fB\-m\fR and \fB\-X\fR.
.Sp
\&\fB\-\-sshlogin\fR is often used with \fB\-\-transfer\fR, \fB\-\-return\fR,
\&\fB\-\-cleanup\fR, and \fB\-\-trc\fR.
.IP "\fB\-\-sshloginfile\fR \fIfilename\fR" 9
.IX Item "--sshloginfile filename"
File with sshlogins. The file consists of sshlogins on separate
lines. Empty lines and lines starting with '#' are ignored. Example:
.Sp
.Vb 15
\&  server.example.com
\&  username@server2.example.com
\&  8/my-8-core-server.example.com
\&  2/my_other_username@my-dualcore.example.net
\&  # This server has SSH running on port 2222
\&  ssh -p 2222 server.example.net
\&  4/ssh -p 2222 quadserver.example.net
\&  # Use a different ssh program
\&  myssh -p 2222 -l myusername hexacpu.example.net
\&  # Use a different ssh program with default number of cores
\&  //usr/local/bin/myssh -p 2222 -l myusername hexacpu.example.net
\&  # Use a different ssh program with 6 cores
\&  6//usr/local/bin/myssh -p 2222 -l myusername hexacpu.example.net
\&  # Assume 16 cores on the local computer
\&  16/:
.Ve
.Sp
When using a different ssh program the last argument must be the hostname.
.Sp
The sshloginfile '..' is special, it read sshlogins from
~/.parallel/sshloginfile
.IP "\fB\-\-silent\fR" 9
.IX Item "--silent"
Silent.  The job to be run will not be printed. This is the default.
Can be reversed with \fB\-v\fR.
.IP "\fB\-\-tty\fR (beta testing)" 9
.IX Item "--tty (beta testing)"
.PD 0
.IP "\fB\-T\fR (beta testing)" 9
.IX Item "-T (beta testing)"
.PD
Open terminal tty. If \s-1GNU\s0 \fBparallel\fR is used for starting an
interactive program then this option may be needed. It will start only
one job at a time (i.e. \fB\-j1\fR), not buffer the output (i.e. \fB\-u\fR),
and it will open a tty for the job. When the job is done, the next job
will get the tty.
.IP "\fB\-\-tmpdir\fR \fIdirname\fR" 9
.IX Item "--tmpdir dirname"
Directory for temporary files. \s-1GNU\s0 \fBparallel\fR normally buffers output
into temporary files in /tmp. By setting \fB\-\-tmpdir\fR you can use a
different dir for the files. Setting \fB\-\-tmpdir\fR is equivalent to
setting \f(CW$TMPDIR\fR.
.IP "\fB\-\-tollef\fR" 9
.IX Item "--tollef"
Make \s-1GNU\s0 \fBparallel\fR behave like Tollef's parallel command. To
override use \fB\-\-gnu\fR.
.IP "\fB\-\-verbose\fR" 9
.IX Item "--verbose"
.PD 0
.IP "\fB\-t\fR" 9
.IX Item "-t"
.PD
Print the job to be run on standard error.
.Sp
See also \fB\-v\fR and \fB\-p\fR.
.IP "\fB\-\-transfer\fR" 9
.IX Item "--transfer"
Transfer files to remote computers. \fB\-\-transfer\fR is used with
\&\fB\-\-sshlogin\fR when the arguments are files and should be transferred to
the remote computers. The files will be transferred using \fBrsync\fR and
will be put relative to the default login dir. E.g.
.Sp
.Vb 2
\&  echo foo/bar.txt | parallel \e
\&    --sshlogin server.example.com --transfer wc
.Ve
.Sp
This will transfer the file \fIfoo/bar.txt\fR to the computer
\&\fIserver.example.com\fR to the file \fI$HOME/foo/bar.txt\fR before running
\&\fBwc foo/bar.txt\fR on \fIserver.example.com\fR.
.Sp
.Vb 2
\&  echo /tmp/foo/bar.txt | parallel \e
\&    --sshlogin server.example.com --transfer wc
.Ve
.Sp
This will transfer the file \fIfoo/bar.txt\fR to the computer
\&\fIserver.example.com\fR to the file \fI/tmp/foo/bar.txt\fR before running
\&\fBwc /tmp/foo/bar.txt\fR on \fIserver.example.com\fR.
.Sp
\&\fB\-\-transfer\fR is often used with \fB\-\-return\fR and \fB\-\-cleanup\fR.
.Sp
\&\fB\-\-transfer\fR is ignored when used with \fB\-\-sshlogin :\fR or when not used with \fB\-\-sshlogin\fR.
.IP "\fB\-\-trc\fR \fIfilename\fR" 9
.IX Item "--trc filename"
Transfer, Return, Cleanup. Short hand for:
.Sp
\&\fB\-\-transfer\fR \fB\-\-return\fR \fIfilename\fR \fB\-\-cleanup\fR
.IP "\fB\-\-trim\fR <n|l|r|lr|rl>" 9
.IX Item "--trim <n|l|r|lr|rl>"
Trim white space in input.
.RS 9
.IP "n" 4
.IX Item "n"
No trim. Input is not modified. This is the default.
.IP "l" 4
.IX Item "l"
Left trim. Remove white space from start of input. E.g. \*(L" a bc \*(R" \-> \*(L"a bc \*(R".
.IP "r" 4
.IX Item "r"
Right trim. Remove white space from end of input. E.g. \*(L" a bc \*(R" \-> \*(L" a bc\*(R".
.IP "lr" 4
.IX Item "lr"
.PD 0
.IP "rl" 4
.IX Item "rl"
.PD
Both trim. Remove white space from both start and end of input. E.g. \*(L"
a bc \*(R" \-> \*(L"a bc\*(R". This is the default if \fB\-\-colsep\fR is used.
.RE
.RS 9
.RE
.IP "\fB\-\-ungroup\fR" 9
.IX Item "--ungroup"
.PD 0
.IP "\fB\-u\fR" 9
.IX Item "-u"
.PD
Ungroup output.  Output is printed as soon as possible. This may cause
output from different commands to be mixed. \s-1GNU\s0 \fBparallel\fR runs
faster with \fB\-u\fR. Can be reversed with \fB\-g\fR.
.IP "\fB\-\-extensionreplace\fR \fIreplace-str\fR" 9
.IX Item "--extensionreplace replace-str"
.PD 0
.IP "\fB\-U\fR \fIreplace-str\fR" 9
.IX Item "-U replace-str"
.PD
Use the replacement string \fIreplace-str\fR instead of {.} for input line without extension.
.IP "\fB\-\-use\-cpus\-instead\-of\-cores\fR" 9
.IX Item "--use-cpus-instead-of-cores"
Count the number of physical CPUs instead of \s-1CPU\s0 cores. When computing
how many jobs to run simultaneously relative to the number of \s-1CPU\s0 cores
you can ask \s-1GNU\s0 \fBparallel\fR to instead look at the number of physical
CPUs. This will make sense for computers that have hyperthreading as
two jobs running on one \s-1CPU\s0 with hyperthreading will run slower than
two jobs running on two physical CPUs. Some multi-core CPUs can run
faster if only one thread is running per physical \s-1CPU\s0. Most users will
not need this option.
.IP "\fB\-v\fR" 9
.IX Item "-v"
Verbose.  Print the job to be run on standard output. Can be reversed
with \fB\-\-silent\fR. See also \fB\-t\fR.
.Sp
Use \fB\-v\fR \fB\-v\fR to print the wrapping ssh command when running remotely.
.IP "\fB\-\-version\fR" 9
.IX Item "--version"
.PD 0
.IP "\fB\-V\fR" 9
.IX Item "-V"
.PD
Print the version \s-1GNU\s0 \fBparallel\fR and exit.
.IP "\fB\-\-workdir\fR \fImydir\fR" 9
.IX Item "--workdir mydir"
.PD 0
.IP "\fB\-W\fR \fImydir\fR" 9
.IX Item "-W mydir"
.PD
Files transferred using \fB\-\-transfer\fR and \fB\-\-return\fR will be relative
to \fImydir\fR on remote computers, and the command will be executed in
that dir. The special workdir \fB...\fR will create a workdir in
\&\fB~/.parallel/tmp/\fR on the remote computers and will be removed if
using \fB\-\-cleanup\fR.
.IP "\fB\-\-wait\fR (beta testing)" 9
.IX Item "--wait (beta testing)"
Wait for all commands to complete.
.Sp
Implies \fB\-\-semaphore\fR.
.IP "\fB\-X\fR" 9
.IX Item "-X"
Multiple arguments with context replace. Insert as many arguments as
the command line length permits. If \fB{}\fR is not used the arguments
will be appended to the line.  If \fB{}\fR is used as part of a word
(like \fIpic{}.jpg\fR) then the whole word will be repeated. If \fB{}\fR is
used multiple times each \fB{}\fR will be replaced with the arguments.
.Sp
Normally \fB\-X\fR will do the right thing, whereas \fB\-m\fR can give
unexpected results if \fB{}\fR is used as part of a word.
.Sp
Support for \fB\-X\fR with \fB\-\-sshlogin\fR is limited and may fail.
.Sp
See also \fB\-m\fR.
.IP "\fB\-\-exit\fR" 9
.IX Item "--exit"
.PD 0
.IP "\fB\-x\fR" 9
.IX Item "-x"
.PD
Exit if the size (see the \fB\-s\fR option) is exceeded.
.IP "\fB\-\-shebang\fR" 9
.IX Item "--shebang"
.PD 0
.IP "\fB\-\-hashbang\fR" 9
.IX Item "--hashbang"
.IP "\fB\-Y\fR" 9
.IX Item "-Y"
.PD
\&\s-1GNU\s0 \fBParallel\fR can be called as a shebang (#!) command as the first line of a script. Like this:
.Sp
.Vb 1
\&  #!/usr/bin/parallel -Yr traceroute
.Ve
.Sp
.Vb 3
\&  foss.org.my
\&  debian.org
\&  freenetproject.org
.Ve
.Sp
For this to work \fB\-\-shebang\fR or \fB\-Y\fR must be set as the first option.
.SH "EXAMPLE: Working as xargs \-n1. Argument appending"
.IX Header "EXAMPLE: Working as xargs -n1. Argument appending"
\&\s-1GNU\s0 \fBparallel\fR can work similar to \fBxargs \-n1\fR.
.PP
To compress all html files using \fBgzip\fR run:
.PP
\&\fBfind . \-name '*.html' | parallel gzip\fR
.PP
If the file names may contain a newline use \fB\-0\fR. Substitute \s-1FOO\s0 \s-1BAR\s0 with
\&\s-1FUBAR\s0 in all files in this dir and subdirs:
.PP
\&\fBfind . \-type f \-print0 | parallel \-q0 perl \-i \-pe 's/FOO BAR/FUBAR/g'\fR
.PP
Note \fB\-q\fR is needed because of the space in '\s-1FOO\s0 \s-1BAR\s0'.
.SH "EXAMPLE: Reading arguments from command line"
.IX Header "EXAMPLE: Reading arguments from command line"
\&\s-1GNU\s0 \fBparallel\fR can take the arguments from command line instead of
stdin (standard input). To compress all html files in the current dir
using \fBgzip\fR run:
.PP
\&\fBparallel gzip ::: *.html\fR
.PP
To convert *.wav to *.mp3 using \s-1LAME\s0 running one process per \s-1CPU\s0 core
run:
.PP
\&\fBparallel lame {} \-o {.}.mp3 ::: *.wav\fR
.SH "EXAMPLE: Inserting multiple arguments"
.IX Header "EXAMPLE: Inserting multiple arguments"
When moving a lot of files like this: \fBmv * destdir\fR you will
sometimes get the error:
.PP
\&\fBbash: /bin/mv: Argument list too long\fR
.PP
because there are too many files. You can instead do:
.PP
\&\fBls | parallel mv {} destdir\fR
.PP
This will run \fBmv\fR for each file. It can be done faster if \fBmv\fR gets
as many arguments that will fit on the line:
.PP
\&\fBls | parallel \-m mv {} destdir\fR
.SH "EXAMPLE: Context replace"
.IX Header "EXAMPLE: Context replace"
To remove the files \fIpict0000.jpg\fR .. \fIpict9999.jpg\fR you could do:
.PP
\&\fBseq \-w 0 9999 | parallel rm pict{}.jpg\fR
.PP
You could also do:
.PP
\&\fBseq \-w 0 9999 | perl \-pe 's/(.*)/pict$1.jpg/' | parallel \-m rm\fR
.PP
The first will run \fBrm\fR 10000 times, while the last will only run
\&\fBrm\fR as many times needed to keep the command line length short
enough to avoid \fBArgument list too long\fR (it typically runs 1\-2 times).
.PP
You could also run:
.PP
\&\fBseq \-w 0 9999 | parallel \-X rm pict{}.jpg\fR
.PP
This will also only run \fBrm\fR as many times needed to keep the command
line length short enough.
.SH "EXAMPLE: Compute intensive jobs and substitution"
.IX Header "EXAMPLE: Compute intensive jobs and substitution"
If ImageMagick is installed this will generate a thumbnail of a jpg
file:
.PP
\&\fBconvert \-geometry 120 foo.jpg thumb_foo.jpg\fR
.PP
This will run with number-of-cpu-cores jobs in parallel for all jpg
files in a directory:
.PP
\&\fBls *.jpg | parallel convert \-geometry 120 {} thumb_{}\fR
.PP
To do it recursively use \fBfind\fR:
.PP
\&\fBfind . \-name '*.jpg' | parallel convert \-geometry 120 {} {}_thumb.jpg\fR
.PP
Notice how the argument has to start with \fB{}\fR as \fB{}\fR will include path
(e.g. running \fBconvert \-geometry 120 ./foo/bar.jpg
thumb_./foo/bar.jpg\fR would clearly be wrong). The command will
generate files like ./foo/bar.jpg_thumb.jpg.
.PP
Use \fB{.}\fR to avoid the extra .jpg in the file name. This command will
make files like ./foo/bar_thumb.jpg:
.PP
\&\fBfind . \-name '*.jpg' | parallel convert \-geometry 120 {} {.}_thumb.jpg\fR
.SH "EXAMPLE: Substitution and redirection"
.IX Header "EXAMPLE: Substitution and redirection"
This will generate an uncompressed version of .gz\-files next to the .gz\-file:
.PP
\&\fBparallel zcat {} "\fR>\fB"{.} ::: *.gz\fR
.PP
Quoting of > is necessary to postpone the redirection. Another
solution is to quote the whole command:
.PP
\&\fBparallel "zcat {} \fR>\fB{.}" ::: *.gz\fR
.PP
Other special shell charaters (such as * ; $ > < | >> <<) also needs
to be put in quotes, as they may otherwise be interpreted by the shell
and not given to \s-1GNU\s0 \fBparallel\fR.
.SH "EXAMPLE: Composed commands"
.IX Header "EXAMPLE: Composed commands"
A job can consist of several commands. This will print the number of
files in each directory:
.PP
\&\fBls | parallel 'echo \-n {}\*(L" \*(R"; ls {}|wc \-l'\fR
.PP
To put the output in a file called <name>.dir:
.PP
\&\fBls | parallel '(echo \-n {}\*(L" \*(R"; ls {}|wc \-l) \fR> \fB{}.dir'\fR
.PP
Even small shell scripts can be run by \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fBfind . | parallel 'a={}; name=${a##*/}; upper=$(echo \*(L"$name\*(R" | tr \*(L"[:lower:]\*(R" \*(L"[:upper:]\*(R"); echo \*(L"$name \- \f(CB$upper\fB\*(R"'\fR
.PP
\&\fBls | parallel 'mv {} \*(L"$(echo {} | tr \*(R"[:upper:]\*(L" \*(R"[:lower:]\*(L")\*(R"'\fR
.PP
Given a list of URLs, list all URLs that fail to download. Print the
line number and the \s-1URL\s0.
.PP
\&\fBcat urlfile | parallel "wget {} 2\fR>\fB/dev/null || grep \-n {} urlfile"\fR
.PP
Create a mirror directory with the same filenames except all files and
symlinks are empty files.
.PP
\&\fBcp \-rs /the/source/dir mirror_dir; find mirror_dir \-type l | parallel \-m rm {} '&&' touch {}\fR
.SH "EXAMPLE: Removing file extension when processing files"
.IX Header "EXAMPLE: Removing file extension when processing files"
When processing files removing the file extension using \fB{.}\fR is
often useful.
.PP
Create a directory for each zip-file and unzip it in that dir:
.PP
\&\fBparallel 'mkdir {.}; cd {.}; unzip ../{}' ::: *.zip\fR
.PP
Recompress all .gz files in current directory using \fBbzip2\fR running 1
job per \s-1CPU\s0 core in parallel:
.PP
\&\fBparallel "zcat {} | bzip2 \fR>\fB{.}.bz2 && rm {}" ::: *.gz\fR
.PP
Convert all \s-1WAV\s0 files to \s-1MP3\s0 using \s-1LAME:\s0
.PP
\&\fBfind sounddir \-type f \-name '*.wav' | parallel lame {} \-o {.}.mp3\fR
.PP
Put all converted in the same directory:
.PP
\&\fBfind sounddir \-type f \-name '*.wav' | parallel lame {} \-o mydir/{/.}.mp3\fR
.SH "EXAMPLE: Removing two file extensions when processing files and calling GNU Parallel from itself"
.IX Header "EXAMPLE: Removing two file extensions when processing files and calling GNU Parallel from itself"
If you have directory with tar.gz files and want these extracted in
the corresponding dir (e.g foo.tar.gz will be extracted in the dir
foo) you can do:
.PP
\&\fBls *.tar.gz| parallel \-U {tar} 'echo {tar}|parallel \*(L"mkdir \-p {.} ; tar \-C {.} \-xf {.}.tar.gz\*(R"'\fR
.SH "EXAMPLE: Download 10 images for each of the past 30 days"
.IX Header "EXAMPLE: Download 10 images for each of the past 30 days"
Let us assume a website stores images like:
.PP
.Vb 1
\&   http://www.example.com/path/to/YYYYMMDD_##.jpg
.Ve
.PP
where \s-1YYYYMMDD\s0 is the date and ## is the number 01\-10.  This will
generate the past 30 days as \s-1YYYYMMDD:\s0
.PP
\&\fBseq 30 | parallel date \-d '\*(L"today \-{} days\*(R"' +%Y%m%d\fR
.PP
Based on this we can let \s-1GNU\s0 \fBparallel\fR generate 10 \fBwget\fRs per day:
.PP
\&\fIthe above\fR \fB| parallel \-I {o} seq \-w 10 \*(L"|\*(R" parallel wget
http://www.example.com/path/to/{o}_{}.jpg\fR
.SH "EXAMPLE: Process files from a tar file while unpacking"
.IX Header "EXAMPLE: Process files from a tar file while unpacking"
If the files to be processed are in a tar file then unpacking one file
and processing it immediately may be faster than first unpacking all
files.
.PP
\&\fBtar xvf foo.tgz | perl \-ne 'print \f(CB$l\fB;$l=$_;END{print \f(CB$l\fB}' |
parallel echo\fR
.PP
The Perl one-liner is needed to avoid race condition.
.SH "EXAMPLE: Rewriting a for-loop and a while-read-loop"
.IX Header "EXAMPLE: Rewriting a for-loop and a while-read-loop"
for-loops like this:
.PP
.Vb 3
\&  (for x in `cat list` ; do
\&    do_something $x
\&  done) | process_output
.Ve
.PP
and while-read-loops like this:
.PP
.Vb 3
\&  cat list | (while read x ; do
\&    do_something $x
\&  done) | process_output
.Ve
.PP
can be written like this:
.PP
\&\fBcat list | parallel do_something | process_output\fR
.PP
If the processing requires more steps the for-loop like this:
.PP
.Vb 5
\& (for x in `cat list` ; do
\&   no_extension=${x%.*};
\&   do_something $x scale $no_extension.jpg
\&   do_step2 <$x $no_extension
\& done) | process_output
.Ve
.PP
and while-loops like this:
.PP
.Vb 5
\& cat list | (while read x ; do
\&   no_extension=${x%.*};
\&   do_something $x scale $no_extension.jpg
\&   do_step2 <$x $no_extension
\& done) | process_output
.Ve
.PP
can be written like this:
.PP
\&\fBcat list | parallel \*(L"do_something {} scale {.}.jpg ; do_step2 <{} {.}\*(R" | process_output\fR
.SH "EXAMPLE: Group output lines"
.IX Header "EXAMPLE: Group output lines"
When running jobs that output data, you often do not want the output
of multiple jobs to run together. \s-1GNU\s0 \fBparallel\fR defaults to grouping the
output of each job, so the output is printed when the job finishes. If
you want the output to be printed while the job is running you can use
\&\fB\-u\fR.
.PP
Compare the output of:
.PP
\&\fBparallel traceroute ::: foss.org.my debian.org freenetproject.org\fR
.PP
to the output of:
.PP
\&\fBparallel \-u traceroute ::: foss.org.my debian.org freenetproject.org\fR
.SH "EXAMPLE: Keep order of output same as order of input"
.IX Header "EXAMPLE: Keep order of output same as order of input"
Normally the output of a job will be printed as soon as it
completes. Sometimes you want the order of the output to remain the
same as the order of the input. This is often important, if the output
is used as input for another system. \fB\-k\fR will make sure the order of
output will be in the same order as input even if later jobs end
before earlier jobs.
.PP
Append a string to every line in a text file:
.PP
\&\fBcat textfile | parallel \-k echo {} append_string\fR
.PP
If you remove \fB\-k\fR some of the lines may come out in the wrong order.
.PP
Another example is \fBtraceroute\fR:
.PP
\&\fBparallel traceroute ::: foss.org.my debian.org freenetproject.org\fR
.PP
will give traceroute of foss.org.my, debian.org and
freenetproject.org, but it will be sorted according to which job
completed first.
.PP
To keep the order the same as input run:
.PP
\&\fBparallel \-k traceroute ::: foss.org.my debian.org freenetproject.org\fR
.PP
This will make sure the traceroute to foss.org.my will be printed
first.
.PP
A bit more complex example is downloading a huge file in chunks in
parallel: Some internet connections will deliver more data if you
download files in parallel. For downloading files in parallel see:
\&\*(L"\s-1EXAMPLE:\s0 Download 10 images for each of the past 30 days\*(R". But if you
are downloading a big file you can download the file in chunks in
parallel.
.PP
To download byte 10000000\-19999999 you can use \fBcurl\fR:
.PP
\&\fBcurl \-r 10000000\-19999999 http://example.com/the/big/file\fR > \fBfile.part\fR
.PP
To download a 1 \s-1GB\s0 file we need 100 10MB chunks downloaded and
combined in the correct order.
.PP
\&\fBseq 0 99 | parallel \-k curl \-r \e
    {}0000000\-{}9999999 http://example.com/the/big/file\fR > \fBfile\fR
.SH "EXAMPLE: Parallel grep"
.IX Header "EXAMPLE: Parallel grep"
\&\fBgrep \-r\fR greps recursively through directories. On multicore CPUs
\&\s-1GNU\s0 \fBparallel\fR can often speed this up.
.PP
\&\fBfind . \-type f | parallel \-k \-j150% \-n 1000 \-m grep \-H \-n \s-1STRING\s0 {}\fR
.PP
This will run 1.5 job per core, and give 1000 arguments to \fBgrep\fR.
.PP
To grep a big file in parallel use \fB\-\-pipe\fR:
.PP
\&\fBcat bigfile | parallel \-\-pipe grep foo\fR
.PP
Depending on your disks and CPUs it may be faster to read larger blocks:
.PP
\&\fBcat bigfile | parallel \-\-pipe \-\-block 10M grep foo\fR
.SH "EXAMPLE: Using remote computers"
.IX Header "EXAMPLE: Using remote computers"
To run commands on a remote computer \s-1SSH\s0 needs to be set up and you
must be able to login without entering a password (\fBssh-agent\fR may be
handy).
.PP
To run \fBecho\fR on \fBserver.example.com\fR:
.PP
.Vb 1
\&  seq 10 | parallel --sshlogin server.example.com echo
.Ve
.PP
To run commands on more than one remote computer run:
.PP
.Vb 1
\&  seq 10 | parallel --sshlogin server.example.com,server2.example.net echo
.Ve
.PP
Or:
.PP
.Vb 2
\&  seq 10 | parallel --sshlogin server.example.com \e
\&    --sshlogin server2.example.net echo
.Ve
.PP
If the login username is \fIfoo\fR on \fIserver2.example.net\fR use:
.PP
.Vb 2
\&  seq 10 | parallel --sshlogin server.example.com \e
\&    --sshlogin foo@server2.example.net echo
.Ve
.PP
To distribute the commands to a list of computers, make a file
\&\fImycomputers\fR with all the computers:
.PP
.Vb 3
\&  server.example.com
\&  foo@server2.example.com
\&  server3.example.com
.Ve
.PP
Then run:
.PP
.Vb 1
\&  seq 10 | parallel --sshloginfile mycomputers echo
.Ve
.PP
To include the local computer add the special sshlogin ':' to the list:
.PP
.Vb 4
\&  server.example.com
\&  foo@server2.example.com
\&  server3.example.com
\&  :
.Ve
.PP
\&\s-1GNU\s0 \fBparallel\fR will try to determine the number of \s-1CPU\s0 cores on each
of the remote computers, and run one job per \s-1CPU\s0 core \- even if the
remote computers do not have the same number of \s-1CPU\s0 cores.
.PP
If the number of \s-1CPU\s0 cores on the remote computers is not identified
correctly the number of \s-1CPU\s0 cores can be added in front. Here the
computer has 8 \s-1CPU\s0 cores.
.PP
.Vb 1
\&  seq 10 | parallel --sshlogin 8/server.example.com echo
.Ve
.SH "EXAMPLE: Transferring of files"
.IX Header "EXAMPLE: Transferring of files"
To recompress gzipped files with \fBbzip2\fR using a remote computer run:
.PP
.Vb 3
\&  find logs/ -name '*.gz' | \e
\&    parallel --sshlogin server.example.com \e
\&    --transfer "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
This will list the .gz\-files in the \fIlogs\fR directory and all
directories below. Then it will transfer the files to
\&\fIserver.example.com\fR to the corresponding directory in
\&\fI$HOME/logs\fR. On \fIserver.example.com\fR the file will be recompressed
using \fBzcat\fR and \fBbzip2\fR resulting in the corresponding file with
\&\fI.gz\fR replaced with \fI.bz2\fR.
.PP
If you want the resulting bz2\-file to be transferred back to the local
computer add \fI\-\-return {.}.bz2\fR:
.PP
.Vb 3
\&  find logs/ -name '*.gz' | \e
\&    parallel --sshlogin server.example.com \e
\&    --transfer --return {.}.bz2 "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
After the recompressing is done the \fI.bz2\fR\-file is transferred back to
the local computer and put next to the original \fI.gz\fR\-file.
.PP
If you want to delete the transferred files on the remote computer add
\&\fI\-\-cleanup\fR. This will remove both the file transferred to the remote
computer and the files transferred from the remote computer:
.PP
.Vb 3
\&  find logs/ -name '*.gz' | \e
\&    parallel --sshlogin server.example.com \e
\&    --transfer --return {.}.bz2 --cleanup "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
If you want run on several computers add the computers to \fI\-\-sshlogin\fR
either using ',' or multiple \fI\-\-sshlogin\fR:
.PP
.Vb 4
\&  find logs/ -name '*.gz' | \e
\&    parallel --sshlogin server.example.com,server2.example.com \e
\&    --sshlogin server3.example.com \e
\&    --transfer --return {.}.bz2 --cleanup "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
You can add the local computer using \fI\-\-sshlogin :\fR. This will disable the
removing and transferring for the local computer only:
.PP
.Vb 5
\&  find logs/ -name '*.gz' | \e
\&    parallel --sshlogin server.example.com,server2.example.com \e
\&    --sshlogin server3.example.com \e
\&    --sshlogin : \e
\&    --transfer --return {.}.bz2 --cleanup "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
Often \fI\-\-transfer\fR, \fI\-\-return\fR and \fI\-\-cleanup\fR are used together. They can be
shortened to \fI\-\-trc\fR:
.PP
.Vb 5
\&  find logs/ -name '*.gz' | \e
\&    parallel --sshlogin server.example.com,server2.example.com \e
\&    --sshlogin server3.example.com \e
\&    --sshlogin : \e
\&    --trc {.}.bz2 "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
With the file \fImycomputers\fR containing the list of computers it becomes:
.PP
.Vb 2
\&  find logs/ -name '*.gz' | parallel --sshloginfile mycomputers \e
\&    --trc {.}.bz2 "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.PP
If the file \fI~/.parallel/sshloginfile\fR contains the list of computers
the special short hand \fI\-S ..\fR can be used:
.PP
.Vb 2
\&  find logs/ -name '*.gz' | parallel -S .. \e
\&    --trc {.}.bz2 "zcat {} | bzip2 -9 >{.}.bz2"
.Ve
.SH "EXAMPLE: Distributing work to local and remote computers"
.IX Header "EXAMPLE: Distributing work to local and remote computers"
Convert *.mp3 to *.ogg running one process per \s-1CPU\s0 core on local computer and server2:
.PP
.Vb 2
\&  parallel --trc {.}.ogg -S server2,: \e
\&  'mpg321 -w - {} | oggenc -q0 - -o {.}.ogg' ::: *.mp3
.Ve
.SH "EXAMPLE: Use multiple inputs in one command"
.IX Header "EXAMPLE: Use multiple inputs in one command"
Copy files like foo.es.ext to foo.ext:
.PP
\&\fBls *.es.* | perl \-pe 'print; s/\e.es//' | parallel \-N2 cp {1} {2}\fR
.PP
The perl command spits out 2 lines for each input. \s-1GNU\s0 \fBparallel\fR
takes 2 inputs (using \fB\-N2\fR) and replaces {1} and {2} with the inputs.
.PP
Print the number on the opposing sides of a six sided die:
.PP
\&\fBparallel \-a <(seq 6) \-a <(seq 6 \-1 1) echo\fR
.PP
Convert files from all subdirs to PNG-files with consecutive numbers
(useful for making input \s-1PNG\s0's for \fBffmpeg\fR):
.PP
\&\fBparallel \-a <(find . \-type f | sort) \-a <(seq $(find . \-type f|wc \-l)) convert {1} {2}.png\fR
.PP
Alternative version:
.PP
\&\fBfind . \-type f | sort | parallel convert {} \e$PARALLEL_SEQ.png\fR
.SH "EXAMPLE: Use a table as input"
.IX Header "EXAMPLE: Use a table as input"
Content of table_file.tsv:
.PP
.Vb 2
\&  foo<TAB>bar
\&  baz <TAB> quux
.Ve
.PP
To run:
.PP
.Vb 2
\&  cmd -o bar -i foo
\&  cmd -o quux -i baz
.Ve
.PP
you can run:
.PP
\&\fBparallel \-a table_file.tsv \-\-colsep '\et' cmd \-o {2} \-i {1}\fR
.PP
Note: The default for \s-1GNU\s0 \fBparallel\fR is to remove the spaces around the columns. To keep the spaces:
.PP
\&\fBparallel \-a table_file.tsv \-\-trim n \-\-colsep '\et' cmd \-o {2} \-i {1}\fR
.SH "EXAMPLE: Run the same command 10 times"
.IX Header "EXAMPLE: Run the same command 10 times"
If you want to run the same command with the same arguments 10 times
in parallel you can do:
.PP
\&\fBseq 10 | parallel \-n0 my_command my_args\fR
.SH "EXAMPLE: Working as cat | sh. Resource inexpensive jobs and evaluation"
.IX Header "EXAMPLE: Working as cat | sh. Resource inexpensive jobs and evaluation"
\&\s-1GNU\s0 \fBparallel\fR can work similar to \fBcat | sh\fR.
.PP
A resource inexpensive job is a job that takes very little \s-1CPU\s0, disk
I/O and network I/O. Ping is an example of a resource inexpensive
job. wget is too \- if the webpages are small.
.PP
The content of the file jobs_to_run:
.PP
.Vb 7
\&  ping -c 1 10.0.0.1
\&  wget http://status-server/status.cgi?ip=10.0.0.1
\&  ping -c 1 10.0.0.2
\&  wget http://status-server/status.cgi?ip=10.0.0.2
\&  ...
\&  ping -c 1 10.0.0.255
\&  wget http://status-server/status.cgi?ip=10.0.0.255
.Ve
.PP
To run 100 processes simultaneously do:
.PP
\&\fBparallel \-j 100 < jobs_to_run\fR
.PP
As there is not a \fIcommand\fR the jobs will be evaluated by the shell.
.SH "EXAMPLE: Processing a big file using more cores"
.IX Header "EXAMPLE: Processing a big file using more cores"
To process a big file or some output you can use \fB\-\-pipe\fR to split up
the data into blocks and pipe the blocks into the processing program.
.PP
If the program is \fBgzip \-9\fR you can do:
.PP
\&\fBcat bigfile | parallel \-\-pipe \-\-recend '' \-k gzip \-9 \fR>\fBbigfile.gz\fR
.PP
This will split \fBbigfile\fR into blocks of 1 \s-1MB\s0 and pass that to \fBgzip
\&\-9\fR in parallel. One \fBgzip\fR will be run per \s-1CPU\s0 core. The output of
\&\fBgzip \-9\fR will be kept in order and saved to \fBbigfile.gz\fR
.PP
\&\fBgzip\fR works fine if the output is appended, but some processing does
not work like that \- for example sorting. For this \s-1GNU\s0 \fBparallel\fR can
put the output of each command into a file. This will sort a big file
in parallel:
.PP
\&\fBcat bigfile | parallel \-\-pipe \-\-files sort | parallel \-Xj1 sort \-m {} ';' rm {} \fR>\fBbigfile.sort\fR
.PP
Here \fBbigfile\fR is split into blocks of around 1MB, each block ending
in '\en' (which is the default for \fB\-\-recend\fR). Each block is passed
to \fBsort\fR and the output from \fBsort\fR is saved into files. These
files are passed to the second \fBparallel\fR that runs \fBsort \-m\fR on the
files before it removes the files. The output is saved to
\&\fBbigfile.sort\fR.
.SH "EXAMPLE: Working as mutex and counting semaphore"
.IX Header "EXAMPLE: Working as mutex and counting semaphore"
The command \fBsem\fR is an alias for \fBparallel \-\-semaphore\fR.
.PP
A counting semaphore will allow a given number of jobs to be started
in the background.  When the number of jobs are running in the
background, \s-1GNU\s0 \fBsem\fR will wait for one of these to complete before
starting another command. \fBsem \-\-wait\fR will wait for all jobs to
complete.
.PP
Run 10 jobs concurrently in the background:
.PP
.Vb 5
\&  for i in `ls *.log` ; do
\&    echo $i
\&    sem -j10 gzip $i ";" echo done
\&  done
\&  sem --wait
.Ve
.PP
A mutex is a counting semaphore allowing only one job to run. This
will edit the file \fImyfile\fR and prepends the file with lines with the
numbers 1 to 3.
.PP
.Vb 1
\&  seq 3 | parallel sem sed -i -e 'i{}' myfile
.Ve
.PP
As \fImyfile\fR can be very big it is important only one process edits
the file at the same time.
.PP
Name the semaphore to have multiple different semaphores active at the
same time:
.PP
.Vb 1
\&  seq 3 | parallel sem --id mymutex sed -i -e 'i{}' myfile
.Ve
.SH "EXAMPLE: Start editor with filenames from stdin (standard input)"
.IX Header "EXAMPLE: Start editor with filenames from stdin (standard input)"
You can use \s-1GNU\s0 Parallel to start interactive programs like emacs or vi:
.PP
\&\fBcat filelist | parallel \-T \-X emacs\fR
.PP
\&\fBcat filelist | parallel \-T \-X vi\fR
.PP
If there are more files than will fit on a single command line, the
editor will be started again with the remaining files.
.SH "EXAMPLE: GNU Parallel as queue system/batch manager"
.IX Header "EXAMPLE: GNU Parallel as queue system/batch manager"
\&\s-1GNU\s0 \fBparallel\fR can work as a simple job queue system or batch manager.
The idea is to put the jobs into a file and have \s-1GNU\s0 \fBparallel\fR read
from that continuously. As \s-1GNU\s0 \fBparallel\fR will stop at end of file we
use \fBtail\fR to continue reading:
.PP
\&\fBecho \fR>\fBjobqueue\fR; \fBtail \-f jobqueue | parallel\fR
.PP
To submit your jobs to the queue:
.PP
\&\fBecho my_command my_arg \fR>>\fB jobqueue\fR
.PP
You can of course use \fB\-S\fR to distribute the jobs to remote
computers:
.PP
\&\fBecho \fR>\fBjobqueue\fR; \fBtail \-f jobqueue | parallel \-S ..\fR
.PP
There are a two small issues when using \s-1GNU\s0 \fBparallel\fR as queue
system/batch manager:
.IP "\(bu" 2
You will get a warning if you do not submit JobSlots jobs within the
first second. E.g. if you have 8 cores and use \fB\-j+2\fR you have to submit
10 jobs. These can be dummy jobs (e.g. \fBecho foo\fR). You can also simply
ignore the warning.
.IP "\(bu" 2
Jobs will be run immediately, but output from jobs will only be
printed when JobSlots more jobs has been started. E.g. if you have 10
jobslots then the output from the first completed job will only be
printed when job 11 is started.
.SH "EXAMPLE: GNU Parallel as dir processor"
.IX Header "EXAMPLE: GNU Parallel as dir processor"
If you have a dir in which users drop files that needs to be processed
you can do this on GNU/Linux (If you know what \fBinotifywait\fR is
called on other platforms file a bug report):
.PP
\&\fBinotifywait \-q \-m \-r \-e \s-1CLOSE_WRITE\s0 \-\-format \f(CB%w\fB%f my_dir | parallel
\&\-u echo\fR
.PP
This will run the command \fBecho\fR on each file put into \fBmy_dir\fR or
subdirs of \fBmy_dir\fR.
.PP
The \fB\-u\fR is needed because of a small bug in \s-1GNU\s0 \fBparallel\fR. If that
proves to be a problem, file a bug report.
.PP
You can of course use \fB\-S\fR to distribute the jobs to remote
computers:
.PP
\&\fBinotifywait \-q \-m \-r \-e \s-1CLOSE_WRITE\s0 \-\-format \f(CB%w\fB%f my_dir | parallel \-S ..
\&\-u echo\fR
.PP
If the files to be processed are in a tar file then unpacking one file
and processing it immediately may be faster than first unpacking all
files. Set up the dir processor as above and unpack into the dir.
.SH "QUOTING"
.IX Header "QUOTING"
\&\s-1GNU\s0 \fBparallel\fR is very liberal in quoting. You only need to quote
characters that have special meaning in shell:
.PP
( ) $ ` ' " < > ; | \e
.PP
and depending on context these needs to be quoted, too:
.PP
* ~ & # ! ? space * {
.PP
Therefore most people will never need more quoting than putting '\e'
in front of the special characters.
.PP
However, when you want to use a shell variable you need to quote the
$\-sign. Here is an example using \f(CW$PARALLEL_SEQ\fR. This variable is set
by \s-1GNU\s0 \fBparallel\fR itself, so the evaluation of the $ must be done by
the sub shell started by \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fBseq 10 | parallel \-N2 echo seq:\e$PARALLEL_SEQ arg1:{1} arg2:{2}\fR
.PP
If the variable is set before \s-1GNU\s0 \fBparallel\fR starts you can do this:
.PP
\&\fBVAR=this_is_set_before_starting\fR
.PP
\&\fBecho test | parallel echo {} \f(CB$VAR\fB\fR
.PP
Prints: \fBtest this_is_set_before_starting\fR
.PP
It is a little more tricky if the variable contains more than one space in a row:
.PP
\&\fBVAR=\*(L"two  spaces  between  each  word\*(R"\fR
.PP
\&\fBecho test | parallel echo {} \e'\*(L"$VAR\*(R"\e'\fR
.PP
Prints: \fBtest two  spaces  between  each  word\fR
.PP
If the variable should not be evaluated by the shell starting \s-1GNU\s0
\&\fBparallel\fR but be evaluated by the sub shell started by \s-1GNU\s0
\&\fBparallel\fR, then you need to quote it:
.PP
\&\fBecho test | parallel VAR=this_is_set_after_starting \e; echo {} \e$VAR\fR
.PP
Prints: \fBtest this_is_set_after_starting\fR
.PP
It is a little more tricky if the variable contains space:
.PP
\&\fBecho test | parallel VAR='\*(L"two  spaces  between  each  word\*(R"' echo {} \e'\*(L"$VAR\*(R"\e'\fR
.PP
Prints: \fBtest two  spaces  between  each  word\fR
.PP
$$ is the shell variable containing the process id of the shell. This
will print the process id of the shell running \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fBseq 10 | parallel echo $$\fR
.PP
And this will print the process ids of the sub shells started by \s-1GNU\s0
\&\fBparallel\fR.
.PP
\&\fBseq 10 | parallel echo \e$\e$\fR
.PP
If the special characters should not be evaluated by the sub shell
then you need to protect it against evaluation from both the shell
starting \s-1GNU\s0 \fBparallel\fR and the sub shell:
.PP
\&\fBecho test | parallel echo {} \e\e\e$VAR\fR
.PP
Prints: \fBtest \f(CB$VAR\fB\fR
.PP
\&\s-1GNU\s0 \fBparallel\fR can protect against evaluation by the sub shell by
using \-q:
.PP
\&\fBecho test | parallel \-q echo {} \e$VAR\fR
.PP
Prints: \fBtest \f(CB$VAR\fB\fR
.PP
This is particularly useful if you have lots of quoting. If you want to run a perl script like this:
.PP
\&\fBperl \-ne '/^\eS+\es+\eS+$/ and print \f(CB$ARGV\fB,\*(L"\en\*(R"' file\fR
.PP
It needs to be quoted like this:
.PP
\&\fBls | parallel  perl \-ne '/^\e\eS+\e\es+\e\eS+\e$/\e and\e print\e \e$ARGV,\e\*(L"\e\en\e\*(R"'\fR
.PP
Notice how spaces, \e's, "'s, and $'s need to be quoted. \s-1GNU\s0 \fBparallel\fR
can do the quoting by using option \-q:
.PP
\&\fBls | parallel \-q  perl \-ne '/^\eS+\es+\eS+$/ and print \f(CB$ARGV\fB,\*(L"\en\*(R"'\fR
.PP
However, this means you cannot make the sub shell interpret special
characters. For example because of \fB\-q\fR this \s-1WILL\s0 \s-1NOT\s0 \s-1WORK:\s0
.PP
\&\fBls *.gz | parallel \-q "zcat {} \fR>\fB{.}"\fR
.PP
\&\fBls *.gz | parallel \-q "zcat {} | bzip2 \fR>\fB{.}.bz2"\fR
.PP
because > and | need to be interpreted by the sub shell.
.PP
If you get errors like:
.PP
.Vb 4
\&  sh: -c: line 0: syntax error near unexpected token
\&  sh: Syntax error: Unterminated quoted string
\&  sh: -c: line 0: unexpected EOF while looking for matching `''
\&  sh: -c: line 1: syntax error: unexpected end of file
.Ve
.PP
then you might try using \fB\-q\fR.
.PP
If you are using \fBbash\fR process substitution like \fB<(cat foo)\fR then
you may try \fB\-q\fR and prepending \fIcommand\fR with \fBbash \-c\fR:
.PP
\&\fBls | parallel \-q bash \-c 'wc \-c <(echo {})'\fR
.PP
Or for substituting output:
.PP
\&\fBls | parallel \-q bash \-c 'tar c {} | tee \fR>\fB(gzip \fR>\fB{}.tar.gz) | bzip2 \fR>\fB{}.tar.bz2'\fR
.PP
\&\fBConclusion\fR: To avoid dealing with the quoting problems it may be
easier just to write a small script and have \s-1GNU\s0 \fBparallel\fR call that
script.
.SH "LIST RUNNING JOBS"
.IX Header "LIST RUNNING JOBS"
If you want a list of the jobs currently running you can run:
.PP
\&\fBkillall \-USR1 parallel\fR
.PP
\&\s-1GNU\s0 \fBparallel\fR will then print the currently running jobs on \s-1STDERR\s0.
.SH "COMPLETE RUNNING JOBS BUT DO NOT START NEW JOBS"
.IX Header "COMPLETE RUNNING JOBS BUT DO NOT START NEW JOBS"
If you regret starting a lot of jobs you can simply break \s-1GNU\s0 \fBparallel\fR,
but if you want to make sure you do not have halfcompleted jobs you
should send the signal \fB\s-1SIGTERM\s0\fR to \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fBkillall \-TERM parallel\fR
.PP
This will tell \s-1GNU\s0 \fBparallel\fR to not start any new jobs, but wait until
the currently running jobs are finished before exiting.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "$PARALLEL_PID" 9
.IX Item "$PARALLEL_PID"
The environment variable \f(CW$PARALLEL_PID\fR is set by \s-1GNU\s0 \fBparallel\fR and
is visible to the jobs started from \s-1GNU\s0 \fBparallel\fR. This makes it
possible for the jobs to communicate directly to \s-1GNU\s0 \fBparallel\fR.
Remember to quote the $, so it gets evaluated by the correct
shell.
.Sp
\&\fBExample:\fR If each of the jobs tests a solution and one of jobs finds
the solution the job can tell \s-1GNU\s0 \fBparallel\fR not to start more jobs
by: \fBkill \-TERM \f(CB$PARALLEL_PID\fB\fR. This only works on the local
computer.
.IP "$PARALLEL_SEQ" 9
.IX Item "$PARALLEL_SEQ"
$PARALLEL_SEQ will be set to the sequence number of the job
running. Remember to quote the $, so it gets evaluated by the correct
shell.
.Sp
\&\fBExample:\fR
.Sp
\&\fBseq 10 | parallel \-N2 echo seq:'$'\s-1PARALLEL_SEQ\s0 arg1:{1} arg2:{2}\fR
.IP "$TMPDIR" 9
.IX Item "$TMPDIR"
Directory for temporary files. See: \fB\-\-tmpdir\fR.
.IP "$PARALLEL" 9
.IX Item "$PARALLEL"
The environment variable \f(CW$PARALLEL\fR will be used as default options for
\&\s-1GNU\s0 \fBparallel\fR. If the variable contains special shell characters
(e.g. $, *, or space) then these need to be to be escaped with \e.
.Sp
\&\fBExample:\fR
.Sp
\&\fBcat list | parallel \-j1 \-k \-v ls\fR
.Sp
can be written as:
.Sp
\&\fBcat list | PARALLEL=\*(L"\-kvj1\*(R" parallel ls\fR
.Sp
\&\fBcat list | parallel \-j1 \-k \-v \-S\*(L"myssh user@server\*(R" ls\fR
.Sp
can be written as:
.Sp
\&\fBcat list | PARALLEL='\-kvj1 \-S myssh\e user@server' parallel echo\fR
.Sp
Notice the \e in the middle is needed because 'myssh' and 'user@server'
must be one argument.
.SH "DEFAULT PROFILE (CONFIG FILE)"
.IX Header "DEFAULT PROFILE (CONFIG FILE)"
The file ~/.parallel/config (formerly known as .parallelrc) will be
read if it exists.  Lines starting with '#' will be ignored. It can be
formatted like the environment variable \f(CW$PARALLEL\fR, but it is often
easier to simply put each option on its own line.
.PP
Options on the command line takes precedence over the environment
variable \f(CW$PARALLEL\fR which takes precedence over the file
~/.parallel/config.
.SH "PROFILE FILES"
.IX Header "PROFILE FILES"
If \fB\-\-profile\fR set, \s-1GNU\s0 \fBparallel\fR will read the profile from that file instead of
~/.parallel/config.
.PP
Example: Profile for running every command with \fB\-j\-1\fR and \fBnice\fR
.PP
.Vb 2
\&  echo -j-1 nice > ~/.parallel/nice_profile
\&  parallel -J nice_profile bzip2 -9 ::: *
.Ve
.PP
Example: Profile for running a perl script before every command:
.PP
.Vb 2
\&  echo "perl -e '\e$a=\e$\e$; print \e$a,\e" \e",'\e$PARALLEL_SEQ',\e" \e";';" > ~/.parallel/pre_perl
\&  parallel -J pre_perl echo ::: *
.Ve
.PP
Note how the $ and " need to be quoted using \e.
.PP
Example: Profile for running distributed jobs with \fBnice\fR on the
remote computers:
.PP
.Vb 2
\&  echo -S .. nice > ~/.parallel/dist
\&  parallel -J dist --trc {.}.bz2 bzip2 -9 ::: *
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
If \fB\-\-halt\-on\-error\fR 0 or not specified:
.IP "0" 6
All jobs ran without error.
.IP "1\-253" 6
.IX Item "1-253"
Some of the jobs failed. The exit status gives the number of failed jobs
.IP "254" 6
.IX Item "254"
More than 253 jobs failed.
.IP "255" 6
.IX Item "255"
Other error.
.PP
If \fB\-\-halt\-on\-error\fR 1 or 2: Exit status of the failing job.
.SH "DIFFERENCES BETWEEN GNU Parallel AND ALTERNATIVES"
.IX Header "DIFFERENCES BETWEEN GNU Parallel AND ALTERNATIVES"
There are a lot programs with some of the functionality of \s-1GNU\s0
\&\fBparallel\fR. \s-1GNU\s0 \fBparallel\fR strives to include the best of the
functionality without sacrifying ease of use.
.Sh "\s-1SUMMARY\s0 \s-1TABLE\s0"
.IX Subsection "SUMMARY TABLE"
The following features are in some of the comparable tools:
.PP
Inputs
 I1. Arguments can be read from stdin
 I2. Arguments can be read from a file
 I3. Arguments can be read from multiple files
 I4. Arguments can be read from command line
 I5. Arguments can be read from a table
 I6. Arguments can be read from the same file using #! (shebang)
 I7. Line oriented input as default (Quoting of special chars not needed)
.PP
Manipulation of input
 M1. Composed command
 M2. Multiple arguments can fill up an execution line
 M3. Arguments can be put anywhere in the execution line
 M4. Multiple arguments can be put anywhere in the execution line
 M5. Arguments can be replaced with context
 M6. Input can be treated as complete execution line
.PP
Outputs
 O1. Grouping output so output from different jobs do not mix
 O2. Send stderr to stderr
 O3. Send stdout to stdout
 O4. Order of output can be same as order of input
 O5. Stdout only contains stdout from the command
 O6. Stderr only contains stdout from the command
.PP
Execution
 E1. Running jobs in parallel
 E2. List running jobs
 E3. Finish running jobs, but do not start new jobs
 E4. Number of running jobs can depend on number of cpus
 E5. Finish running jobs, but do not start new jobs after first failure
 E6. Number of running jobs can be adjusted while running
.PP
Remote execution
 R1. Jobs can be run on remote computers
 R2. Basefiles can be transferred
 R3. Argument files can be transferred
 R4. Result files can be transferred
 R5. Cleanup of transferred files
 R6. No config files needed
 R7. Do not run more than \s-1SSHD\s0's MaxStartup can handle
 R8. Configurable \s-1SSH\s0 command
 R9. Retry if connection breaks occationally
.PP
Semaphore
 S1. Possibility to work as a mutex
 S2. Possibility to work as a counting semaphore
.PP
Legend
 \- = no
 x = not applicable
 \s-1ID\s0 = yes
.PP
As every new version of the programs are not tested the table may be
outdated. Please file a bug-report if you find errors (See \s-1REPORTING\s0
\&\s-1BUGS\s0).
.PP
parallel:
I1 I2 I3 I4 I5 I6 I7
M1 M2 M3 M4 M5 M6
O1 O2 O3 O4 O5 O6
E1 E2 E3 E4 E5 E6
R1 R2 R3 R4 R5 R6 R7 R8 R9
S1 S2
.PP
xargs:
I1 I2 \-  \-  \-  \-  \-
\&\-  M2 M3 \-  \-  \-
\&\-  O2 O3 \-  O5 O6
E1 \-  \-  \-  \-  \-
\&\-  \-  \-  \-  \-  x  \-  \-  \-
\&\-  \-
.PP
find \-exec:
\&\-  \-  \-  x  \-  x  \-
\&\-  M2 M3 \-  \-  \-  \-
\&\-  O2 O3 O4 O5 O6
\&\-  \-  \-  \-  \-  \-  \-
\&\-  \-  \-  \-  \-  \-  \-  \-  \-
x  x
.PP
make \-j:
\&\-  \-  \-  \-  \-  \-  \-
\&\-  \-  \-  \-  \-  \-
O1 O2 O3 \-  x  O6
E1 \-  \-  \-  E5 \-
\&\-  \-  \-  \-  \-  \-  \-  \-  \-
\&\-  \-
.PP
ppss:
I1 I2 \-  \-  \-  \-  I7
M1 \-  M3 \-  \-  M6
O1 \-  \-  x  \-  \-
E1 E2 ?E3 E4 \- \-
R1 R2 R3 R4 \-  \-  ?R7 ? ?
\&\-  \-
.PP
pexec:
I1 I2 \-  I4 I5 \-  \-
M1 \-  M3 \-  \-  M6
O1 O2 O3 \-  O5 O6
E1 \-  \-  E4 \-  E6
R1 \-  \-  \-  \-  R6 \-  \-  \-
S1 \-
.PP
xjobs: \s-1TODO\s0 \- Please file a bug-report if you know what features xjobs
supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.PP
prll: \s-1TODO\s0 \- Please file a bug-report if you know what features prll
supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.PP
dxargs: \s-1TODO\s0 \- Please file a bug-report if you know what features dxargs
supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.PP
mdm/middelman: \s-1TODO\s0 \- Please file a bug-report if you know what
features mdm/middelman supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.PP
xapply: \s-1TODO\s0 \- Please file a bug-report if you know what features xapply
supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.PP
paexec: \s-1TODO\s0 \- Please file a bug-report if you know what features paexec
supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.PP
ClusterSSH: \s-1TODO\s0 \- Please file a bug-report if you know what features ClusterSSH
supports (See \s-1REPORTING\s0 \s-1BUGS\s0).
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 xargs \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN xargs AND GNU Parallel"
\&\fBxargs\fR offer some of the same possibilites as \s-1GNU\s0 \fBparallel\fR.
.PP
\&\fBxargs\fR deals badly with special characters (such as space, ' and
"). To see the problem try this:
.PP
.Vb 5
\&  touch important_file
\&  touch 'not important_file'
\&  ls not* | xargs rm
\&  mkdir -p "My brother's 12\e" records"
\&  ls | xargs rmdir
.Ve
.PP
You can specify \fB\-0\fR or \fB\-d \*(L"\en\*(R"\fR, but many input generators are not
optimized for using \fB\s-1NUL\s0\fR as separator but are optimized for
\&\fBnewline\fR as separator. E.g \fBhead\fR, \fBtail\fR, \fBawk\fR, \fBls\fR, \fBecho\fR,
\&\fBsed\fR, \fBtar \-v\fR, \fBperl\fR (\fB\-0\fR and \e0 instead of \en), \fBlocate\fR
(requires using \fB\-0\fR), \fBfind\fR (requires using \fB\-print0\fR), \fBgrep\fR
(requires user to use \fB\-z\fR or \fB\-Z\fR), \fBsort\fR (requires using \fB\-z\fR).
.PP
So \s-1GNU\s0 \fBparallel\fR's newline separation can be emulated with:
.PP
\&\fBcat | xargs \-d \*(L"\en\*(R" \-n1 \f(BIcommand\fB\fR
.PP
\&\fBxargs\fR can run a given number of jobs in parallel, but has no
support for running number-of-cpu-cores jobs in parallel.
.PP
\&\fBxargs\fR has no support for grouping the output, therefore output may
run together, e.g. the first half of a line is from one process and
the last half of the line is from another process. The example
\&\fBParallel grep\fR cannot be done reliably with \fBxargs\fR because of
this. To see this in action try:
.PP
.Vb 8
\&  parallel perl -e '\e$a=\e"1{}\e"x10000000\e;print\e \e$a,\e"\e\en\e"' '>' {} ::: a b c d e f
\&  ls -l a b c d e f
\&  parallel -kP4 -n1 grep 1 > out.par ::: a b c d e f
\&  echo a b c d e f | xargs -P4 -n1 grep 1 > out.xargs-unbuf
\&  echo a b c d e f | xargs -P4 -n1 grep --line-buffered 1 > out.xargs-linebuf
\&  echo a b c d e f | xargs -n1 grep --line-buffered 1 > out.xargs-serial
\&  ls -l out*
\&  md5sum out*
.Ve
.PP
\&\fBxargs\fR has no support for keeping the order of the output, therefore
if running jobs in parallel using \fBxargs\fR the output of the second
job cannot be postponed till the first job is done.
.PP
\&\fBxargs\fR has no support for running jobs on remote computers.
.PP
\&\fBxargs\fR has no support for context replace, so you will have to create the
arguments.
.PP
If you use a replace string in \fBxargs\fR (\fB\-I\fR) you can not force
\&\fBxargs\fR to use more than one argument.
.PP
Quoting in \fBxargs\fR works like \fB\-q\fR in \s-1GNU\s0 \fBparallel\fR. This means
composed commands and redirection require using \fBbash \-c\fR.
.PP
\&\fBls | parallel "wc {} \fR> \fB{}.wc"\fR
.PP
becomes (assuming you have 8 cores)
.PP
\&\fBls | xargs \-d \*(L"\en\*(R" \-P8 \-I {} bash \-c "wc {} \fR>\fB {}.wc"\fR
.PP
and
.PP
\&\fBls | parallel \*(L"echo {}; ls {}|wc\*(R"\fR
.PP
becomes (assuming you have 8 cores)
.PP
\&\fBls | xargs \-d \*(L"\en\*(R" \-P8 \-I {} bash \-c \*(L"echo {}; ls {}|wc\*(R"\fR
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 find \-exec \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN find -exec AND GNU Parallel"
\&\fBfind \-exec\fR offer some of the same possibilites as \s-1GNU\s0 \fBparallel\fR.
.PP
\&\fBfind \-exec\fR only works on files. So processing other input (such as
hosts or URLs) will require creating these inputs as files. \fBfind
\&\-exec\fR has no support for running commands in parallel.
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 make \-j \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN make -j AND GNU Parallel"
\&\fBmake \-j\fR can run jobs in parallel, but requires a crafted Makefile
to do this. That results in extra quoting to get filename containing
newline to work correctly.
.PP
\&\fBmake \-j\fR has no support for grouping the output, therefore output
may run together, e.g. the first half of a line is from one process
and the last half of the line is from another process. The example
\&\fBParallel grep\fR cannot be done reliably with \fBmake \-j\fR because of
this.
.PP
(Very early versions of \s-1GNU\s0 \fBparallel\fR were coincidently implemented
using \fBmake \-j\fR).
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 ppss \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN ppss AND GNU Parallel"
\&\fBppss\fR is also a tool for running jobs in parallel.
.PP
The output of \fBppss\fR is status information and thus not useful for
using as input for another command. The output from the jobs are put
into files.
.PP
The argument replace string ($ITEM) cannot be changed. Arguments must
be quoted \- thus arguments containing special characters (space '"&!*)
may cause problems. More than one argument is not supported. File
names containing newlines are not processed correctly. When reading
input from a file null cannot be used as a terminator. \fBppss\fR needs
to read the whole input file before starting any jobs.
.PP
Output and status information is stored in ppss_dir and thus requires
cleanup when completed. If the dir is not removed before running
\&\fBppss\fR again it may cause nothing to happen as \fBppss\fR thinks the
task is already done. \s-1GNU\s0 \fBparallel\fR will normally not need cleaning
up if running locally and will only need cleaning up if stopped
abnormally and running remote (\fB\-\-cleanup\fR may not complete if
stopped abnormally). The example \fBParallel grep\fR would require extra
postprocessing if written using \fBppss\fR.
.PP
For remote systems \s-1PPSS\s0 requires 3 steps: config, deploy, and
start. \s-1GNU\s0 \fBparallel\fR only requires one step.
.PP
\fI\s-1EXAMPLES\s0 \s-1FROM\s0 ppss \s-1MANUAL\s0\fR
.IX Subsection "EXAMPLES FROM ppss MANUAL"
.PP
Here are the examples from \fBppss\fR's manual page with the equivalent
using \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fB1\fR ./ppss.sh standalone \-d /path/to/files \-c 'gzip '
.PP
\&\fB1\fR find /path/to/files \-type f | parallel gzip
.PP
\&\fB2\fR ./ppss.sh standalone \-d /path/to/files \-c 'cp \*(L"$ITEM\*(R" /destination/dir '
.PP
\&\fB2\fR find /path/to/files \-type f | parallel cp {} /destination/dir
.PP
\&\fB3\fR ./ppss.sh standalone \-f list\-of\-urls.txt \-c 'wget \-q '
.PP
\&\fB3\fR parallel \-a list\-of\-urls.txt wget \-q
.PP
\&\fB4\fR ./ppss.sh standalone \-f list\-of\-urls.txt \-c 'wget \-q \*(L"$ITEM\*(R"'
.PP
\&\fB4\fR parallel \-a list\-of\-urls.txt wget \-q {}
.PP
\&\fB5\fR ./ppss config \-C config.cfg \-c 'encode.sh ' \-d /source/dir \-m
192.168.1.100 \-u ppss \-k ppss\-key.key \-S ./encode.sh \-n nodes.txt \-o
/some/output/dir \-\-upload \-\-download ; ./ppss deploy \-C config.cfg ;
\&./ppss start \-C config
.PP
\&\fB5\fR # parallel does not use configs. If you want a different username put it in nodes.txt: user@hostname
.PP
\&\fB5\fR find source/dir \-type f | parallel \-\-sshloginfile nodes.txt \-\-trc {.}.mp3 lame \-a {} \-o {.}.mp3 \-\-preset standard \-\-quiet
.PP
\&\fB6\fR ./ppss stop \-C config.cfg
.PP
\&\fB6\fR killall \-TERM parallel
.PP
\&\fB7\fR ./ppss pause \-C config.cfg
.PP
\&\fB7\fR Press: CTRL-Z or killall \-SIGTSTP parallel
.PP
\&\fB8\fR ./ppss continue \-C config.cfg
.PP
\&\fB8\fR Enter: fg or killall \-SIGCONT parallel
.PP
\&\fB9\fR ./ppss.sh status \-C config.cfg
.PP
\&\fB9\fR killall \-SIGUSR2 parallel
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 pexec \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN pexec AND GNU Parallel"
\&\fBpexec\fR is also a tool for running jobs in parallel.
.PP
Here are the examples from \fBpexec\fR's info page with the equivalent
using \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fB1\fR pexec \-o sqrt\-%s.dat \-p \*(L"$(seq 10)\*(R" \-e \s-1NUM\s0 \-n 4 \-c \*(-- \e
  'echo \*(L"scale=10000;sqrt($NUM)\*(R" | bc'
.PP
\&\fB1\fR seq 10 | parallel \-j4 'echo \*(L"scale=10000;sqrt({})\*(R" | bc > sqrt\-{}.dat'
.PP
\&\fB2\fR pexec \-p \*(L"$(ls myfiles*.ext)\*(R" \-i \f(CW%s\fR \-o \f(CW%s\fR.sort \*(-- sort
.PP
\&\fB2\fR ls myfiles*.ext | parallel sort {} \*(L">{}.sort\*(R"
.PP
\&\fB3\fR pexec \-f image.list \-n auto \-e B \-u star.log \-c \*(-- \e
  'fistar \f(CW$B\fR.fits \-f 100 \-F id,x,y,flux \-o \f(CW$B\fR.star'
.PP
\&\fB3\fR parallel \-a image.list \e
  'fistar {}.fits \-f 100 \-F id,x,y,flux \-o {}.star' 2>star.log
.PP
\&\fB4\fR pexec \-r *.png \-e \s-1IMG\s0 \-c \-o \- \*(-- \e
  'convert \f(CW$IMG\fR ${IMG%.png}.jpeg ; \*(L"echo \f(CW$IMG:\fR done\*(R"'
.PP
\&\fB4\fR ls *.png | parallel 'convert {} {.}.jpeg; echo {}: done'
.PP
\&\fB5\fR pexec \-r *.png \-i \f(CW%s\fR \-o \f(CW%s\fR.jpg \-c 'pngtopnm | pnmtojpeg'
.PP
\&\fB5\fR ls *.png | parallel 'pngtopnm < {} | pnmtojpeg > {}.jpg'
.PP
\&\fB6\fR for p in *.png ; do echo ${p%.png} ; done | \e
  pexec \-f \- \-i \f(CW%s\fR.png \-o \f(CW%s\fR.jpg \-c 'pngtopnm | pnmtojpeg'
.PP
\&\fB6\fR ls *.png | parallel 'pngtopnm < {} | pnmtojpeg > {.}.jpg'
.PP
\&\fB7\fR LIST=$(for p in *.png ; do echo ${p%.png} ; done)
  pexec \-r \f(CW$LIST\fR \-i \f(CW%s\fR.png \-o \f(CW%s\fR.jpg \-c 'pngtopnm | pnmtojpeg'
.PP
\&\fB7\fR ls *.png | parallel 'pngtopnm < {} | pnmtojpeg > {.}.jpg'
.PP
\&\fB8\fR pexec \-n 8 \-r *.jpg \-y unix \-e \s-1IMG\s0 \-c \e
  'pexec \-j \-m blockread \-d \f(CW$IMG\fR | \e
  jpegtopnm | pnmscale 0.5 | pnmtojpeg | \e
  pexec \-j \-m blockwrite \-s th_$IMG'
.PP
\&\fB8\fR Combining \s-1GNU\s0 \fBparallel\fR and \s-1GNU\s0 \fBsem\fR.
.PP
\&\fB8\fR ls *jpg | parallel \-j8 'sem \-\-id blockread cat {} | jpegtopnm |' \e
  'pnmscale 0.5 | pnmtojpeg | sem \-\-id blockwrite cat > th_{}'
.PP
\&\fB8\fR If reading and writing is done to the same disk, this may be
faster as only one process will be either reading or writing:
.PP
\&\fB8\fR ls *jpg | parallel \-j8 'sem \-\-id diskio cat {} | jpegtopnm |' \e
  'pnmscale 0.5 | pnmtojpeg | sem \-\-id diskio cat > th_{}'
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 xjobs \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN xjobs AND GNU Parallel"
\&\fBxjobs\fR is also a tool for running jobs in parallel. It only supports
running jobs on your local computer.
.PP
\&\fBxjobs\fR deals badly with special characters just like \fBxargs\fR. See
the section \fB\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 xargs \s-1AND\s0 \s-1GNU\s0 Parallel\fR.
.PP
Here are the examples from \fBxjobs\fR's man page with the equivalent
using \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fB1\fR ls \-1 *.zip | xjobs unzip
.PP
\&\fB1\fR ls *.zip | parallel unzip
.PP
\&\fB2\fR ls \-1 *.zip | xjobs \-n unzip
.PP
\&\fB2\fR ls *.zip | parallel unzip >/dev/null
.PP
\&\fB3\fR find . \-name '*.bak' | xjobs gzip
.PP
\&\fB3\fR find . \-name '*.bak' | parallel gzip
.PP
\&\fB4\fR ls \-1 *.jar | sed 's/\e(.*\e)/\e1 > \e1.idx/' | xjobs jar tf
.PP
\&\fB4\fR ls *.jar | parallel jar tf {} '>' {}.idx
.PP
\&\fB5\fR xjobs \-s script
.PP
\&\fB5\fR cat script | parallel
.PP
\&\fB6\fR mkfifo /var/run/my_named_pipe;
xjobs \-s /var/run/my_named_pipe &
echo unzip 1.zip >> /var/run/my_named_pipe;
echo tar cf /backup/myhome.tar /home/me >> /var/run/my_named_pipe
.PP
\&\fB6\fR mkfifo /var/run/my_named_pipe;
cat /var/run/my_named_pipe | parallel &
echo unzip 1.zip >> /var/run/my_named_pipe;
echo tar cf /backup/myhome.tar /home/me >> /var/run/my_named_pipe
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 prll \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN prll AND GNU Parallel"
\&\fBprll\fR is also a tool for running jobs in parallel. It does not
support running jobs on remote computers.
.PP
\&\fBprll\fR encourages using \s-1BASH\s0 aliases and \s-1BASH\s0 functions instead of
scripts. \s-1GNU\s0 \fBparallel\fR will never support running aliases and
functions (see why
http://www.perlmonks.org/index.pl?node_id=484296). However, scripts or
composed commands work just fine.
.PP
\&\fBprll\fR generates a lot of status information on \s-1STDERR\s0 which makes it
harder to use the \s-1STDERR\s0 output of the job directly as input for
another program.
.PP
Here is the example from \fBprll\fR's man page with the equivalent
using \s-1GNU\s0 \fBparallel\fR:
.PP
prll \-s 'mogrify \-flip \f(CW$1\fR' *.jpg
.PP
parallel mogrify \-flip ::: *.jpg
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 dxargs \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN dxargs AND GNU Parallel"
\&\fBdxargs\fR is also a tool for running jobs in parallel.
.PP
\&\fBdxargs\fR does not deal well with more simultaneous jobs than \s-1SSHD\s0's
MaxStartup. \fBdxargs\fR is only built for remote run jobs, but does not
support transferring of files.
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 mdm/middleman \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN mdm/middleman AND GNU Parallel"
middleman(mdm) is also a tool for running jobs in parallel.
.PP
Here are the shellscripts of http://mdm.berlios.de/usage.html ported
to \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fBseq 19 | parallel buffon \-o \- | sort \-n \fR>\fB result\fR
.PP
\&\fBcat files | parallel cmd\fR
.PP
\&\fBfind dir \-execdir sem cmd {} \e;\fR
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 xapply \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN xapply AND GNU Parallel"
\&\fBxapply\fR can run jobs in parallel on the local computer.
.PP
Here are the examples from \fBxapply\fR's man page with the equivalent
using \s-1GNU\s0 \fBparallel\fR:
.PP
\&\fB1\fR xapply '(cd \f(CW%1\fR && make all)' */
.PP
\&\fB1\fR parallel 'cd {} && make all' ::: */
.PP
\&\fB2\fR xapply \-f 'diff \f(CW%1\fR ../version5/%1' manifest | more
.PP
\&\fB2\fR parallel diff {} ../version5/{} < manifest | more
.PP
\&\fB3\fR xapply \-p/dev/null \-f 'diff \f(CW%1\fR \f(CW%2\fR' manifest1 checklist1
.PP
\&\fB3\fR parallel diff {1} {2} :::: manifest1 checklist1
.PP
\&\fB4\fR xapply 'indent' *.c
.PP
\&\fB4\fR parallel indent ::: *.c
.PP
\&\fB5\fR find ~ksb/bin \-type f ! \-perm \-111 \-print | xapply \-f \-v 'chmod a+x' \-
.PP
\&\fB5\fR find ~ksb/bin \-type f ! \-perm \-111 \-print | parallel \-v chmod a+x
.PP
\&\fB6\fR find */ \-... | fmt 960 1024 | xapply \-f \-i /dev/tty 'vi' \-
.PP
\&\fB6\fR sh <(find */ \-... | parallel \-s 1024 echo vi)
.PP
\&\fB6\fR find */ \-... | parallel \-s 1024 \-Xuj1 vi
.PP
\&\fB7\fR find ... | xapply \-f \-5 \-i /dev/tty 'vi' \- \- \- \- \-
.PP
\&\fB7\fR sh <(find ... |parallel \-n5 echo vi)
.PP
\&\fB7\fR find ... |parallel \-n5 \-uj1 vi
.PP
\&\fB8\fR xapply \-fn "" /etc/passwd
.PP
\&\fB8\fR parallel \-k echo < /etc/passwd
.PP
\&\fB9\fR tr ':' '\e012' < /etc/passwd | xapply \-7 \-nf 'chown \f(CW%1\fR \f(CW%6\fR' \- \- \- \- \- \- \-
.PP
\&\fB9\fR tr ':' '\e012' < /etc/passwd | parallel \-N7 chown {1} {6}
.PP
\&\fB10\fR xapply '[ \-d \f(CW%1\fR/RCS ] || echo \f(CW%1\fR' */
.PP
\&\fB10\fR parallel '[ \-d {}/RCS ] || echo {}' ::: */
.PP
\&\fB11\fR xapply \-f '[ \-f \f(CW%1\fR ] && echo \f(CW%1\fR' List | ...
.PP
\&\fB11\fR parallel '[ \-f {} ] && echo {}' < List | ...
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 paexec \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN paexec AND GNU Parallel"
\&\fBpaexec\fR can run jobs in parallel on both the local and remote computers.
.PP
\&\fBpaexec\fR requires commands to print a blank line as the last
output. This means you will have to write a wrapper for most programs.
.PP
\&\fBpaexec\fR has a job dependency facility so a job can depend on another
job to be executed successfully. Sort of a poor\-man's \fBmake\fR.
.PP
Here are the examples from \fBpaexec\fR's example catalog with the equivalent
using \s-1GNU\s0 \fBparallel\fR:
.IP "1_div_X_run:" 1
.IX Item "1_div_X_run:"
.Vb 2
\&  ../../paexec -s -l -c "`pwd`/1_div_X_cmd" -n +1 <<EOF [...]
\&  parallel echo {} '|' `pwd`/1_div_X_cmd <<EOF [...]
.Ve
.IP "all_substr_run:" 1
.IX Item "all_substr_run:"
.Vb 2
\&  ../../paexec -lp -c "`pwd`/all_substr_cmd" -n +3 <<EOF [...]
\&  parallel echo {} '|' `pwd`/all_substr_cmd <<EOF [...]
.Ve
.IP "cc_wrapper_run:" 1
.IX Item "cc_wrapper_run:"
.Vb 8
\&  ../../paexec -c "env CC=gcc CFLAGS=-O2 `pwd`/cc_wrapper_cmd" \e
\&             -n 'host1 host2' \e
\&             -t '/usr/bin/ssh -x' <<EOF [...]
\&  parallel echo {} '|' "env CC=gcc CFLAGS=-O2 `pwd`/cc_wrapper_cmd" \e
\&             -S host1,host2 <<EOF [...]
\&  # This is not exactly the same, but avoids the wrapper
\&  parallel gcc -O2 -c -o {.}.o {} \e
\&             -S host1,host2 <<EOF [...]
.Ve
.IP "toupper_run:" 1
.IX Item "toupper_run:"
.Vb 4
\&  ../../paexec -lp -c "`pwd`/toupper_cmd" -n +10 <<EOF [...]
\&  parallel echo {} '|' ./toupper_cmd <<EOF [...]
\&  # Without the wrapper:
\&  parallel echo {} '| awk {print\e toupper\e(\e$0\e)}' <<EOF [...]
.Ve
.Sh "\s-1DIFFERENCES\s0 \s-1BETWEEN\s0 ClusterSSH \s-1AND\s0 \s-1GNU\s0 Parallel"
.IX Subsection "DIFFERENCES BETWEEN ClusterSSH AND GNU Parallel"
ClusterSSH solves a different problem than \s-1GNU\s0 \fBparallel\fR.
.PP
ClusterSSH runs the same command with the same arguments on a list of
computers \- one per computer. This is typically used for administrating
several computers that are almost identical.
.PP
\&\s-1GNU\s0 \fBparallel\fR runs the same (or different) commands with different
arguments in parallel possibly using remote computers to help
computing. If more than one computer is listed in \fB\-S\fR \s-1GNU\s0 \fBparallel\fR may
only use one of these (e.g. if there are 8 jobs to be run and one
computer has 8 cores).
.PP
\&\s-1GNU\s0 \fBparallel\fR can be used as a poor\-man's version of ClusterSSH:
.PP
\&\fBcat hostlist | parallel ssh {} do_stuff\fR
.SH "BUGS"
.IX Header "BUGS"
.Sh "Quoting of newline"
.IX Subsection "Quoting of newline"
Because of the way newline is quoted this will not work:
.PP
echo 1,2,3 | parallel \-vkd, \*(L"echo 'a{}b'\*(R"
.PP
However, these will all work:
.PP
echo 1,2,3 | parallel \-vkd, echo a{}b
.PP
echo 1,2,3 | parallel \-vkd, \*(L"echo 'a'{}'b'\*(R"
.PP
echo 1,2,3 | parallel \-vkd, \*(L"echo 'a'\*(R"{}\*(L"'b'\*(R"
.Sh "Startup speed"
.IX Subsection "Startup speed"
\&\s-1GNU\s0 \fBparallel\fR is slow at starting up. Half of the startup time on
the local computer is spent finding the maximal length of a command
line. Setting \fB\-s\fR will remove this part of the startup time.
.PP
When using multiple computers \s-1GNU\s0 \fBparallel\fR opens \fBssh\fR connections
to them to figure out how many connections can be used reliably
simultaneously (Namely \s-1SSHD\s0's MaxStartup). This test is done for each
host in serial, so if your \-\-sshloginfile contains many hosts it may
be slow.
.Sh "\-\-nice limits command length"
.IX Subsection "--nice limits command length"
The current implementation of \fB\-\-nice\fR is too pessimistic in the max
allowed command length. It only uses a little more than half of what
it could. This affects \-X and \-m. If this becomes a real problem for
you file a bug\-report.
.Sh "Aliases and functions do not work"
.IX Subsection "Aliases and functions do not work"
If you get:
.PP
\&\fBCan't exec "\f(BIcommand\fB": No such file or directory\fR
.PP
or:
.PP
\&\fBopen3: exec of by \f(BIcommand\fB failed\fR
.PP
it may be because \fIcommand\fR is not known, but it could also be
because \fIcommand\fR is an alias or a function. \s-1GNU\s0 \fBparallel\fR will
never support running aliases and functions (see why
http://www.perlmonks.org/index.pl?node_id=484296), so change your
alias or function to a script.
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Report bugs to <bug\-parallel@gnu.org> or
https://savannah.gnu.org/bugs/?func=additem&group=parallel
.PP
Your bugreport should always include:
.IP "\(bu" 2
The output of \fBparallel \-\-version\fR. If you are not running the latest
released version you should specify why you believe the problem is not
fixed in that version.
.IP "\(bu" 2
A complete example that others can run that shows the problem. A
combination of \fBseq\fR, \fBecho\fR, and \fBsleep\fR can reproduce most
errors.
.SH "AUTHOR"
.IX Header "AUTHOR"
When using \s-1GNU\s0 Parallel for a publication please cite:
.PP
O. Tange (2011): \s-1GNU\s0 Parallel \- The Command-Line Power Tool, ;login:
The \s-1USENIX\s0 Magazine, February 2011:42\-47.
.PP
Copyright (C) 2007\-10\-18 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2008,2009,2010 Ole Tange, http://ole.tange.dk
.PP
Copyright (C) 2010,2011 Ole Tange, http://ole.tange.dk and Free
Software Foundation, Inc.
.PP
Parts of the manual concerning \fBxargs\fR compatibility is inspired by
the manual of \fBxargs\fR from \s-1GNU\s0 findutils 4.4.2.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2007,2008,2009,2010,2011 Free Software Foundation, Inc.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
at your option any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.Sh "Documentation license I"
.IX Subsection "Documentation license I"
Permission is granted to copy, distribute and/or modify this documentation
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the file fdl.txt.
.Sh "Documentation license \s-1II\s0"
.IX Subsection "Documentation license II"
You are free:
.IP "\fBto Share\fR" 9
.IX Item "to Share"
to copy, distribute and transmit the work
.IP "\fBto Remix\fR" 9
.IX Item "to Remix"
to adapt the work
.PP
Under the following conditions:
.IP "\fBAttribution\fR" 9
.IX Item "Attribution"
You must attribute the work in the manner specified by the author or
licensor (but not in any way that suggests that they endorse you or
your use of the work).
.IP "\fBShare Alike\fR" 9
.IX Item "Share Alike"
If you alter, transform, or build upon this work, you may distribute
the resulting work only under the same, similar or a compatible
license.
.PP
With the understanding that:
.IP "\fBWaiver\fR" 9
.IX Item "Waiver"
Any of the above conditions can be waived if you get permission from
the copyright holder.
.IP "\fBPublic Domain\fR" 9
.IX Item "Public Domain"
Where the work or any of its elements is in the public domain under
applicable law, that status is in no way affected by the license.
.IP "\fBOther Rights\fR" 9
.IX Item "Other Rights"
In no way are any of the following rights affected by the license:
.RS 9
.IP "*" 2
Your fair dealing or fair use rights, or other applicable
copyright exceptions and limitations;
.IP "*" 2
The author's moral rights;
.IP "*" 2
Rights other persons may have either in the work itself or in
how the work is used, such as publicity or privacy rights.
.RE
.RS 9
.RE
.IP "\fBNotice\fR" 9
.IX Item "Notice"
For any reuse or distribution, you must make clear to others the
license terms of this work.
.PP
A copy of the full license is included in the file as cc\-by\-sa.txt.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\s-1GNU\s0 \fBparallel\fR uses Perl, and the Perl modules Getopt::Long,
IPC::Open3, Symbol, IO::File, \s-1POSIX\s0, and File::Temp. For remote usage
it also uses rsync with ssh.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBssh\fR(1), \fBrsync\fR(1), \fBfind\fR(1), \fBxargs\fR(1), \fBmake\fR(1),
\&\fBpexec\fR(1), \fBppss\fR(1), \fBxjobs\fR(1), \fBprll\fR(1), \fBdxargs\fR(1),
\&\fBmdm\fR(1),
