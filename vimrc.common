" vim: filetype=vim
source ~/dotfiles/vimrc.vundle

" vim-powerline
let g:Powerline_symbols='fancy'
set encoding=utf-8
set t_Co=256

syntax on
filetype plugin indent on
colorscheme darkblue

"set number
set autoindent
set showcmd
set showmatch
set showmode
set laststatus=2 " always show status lines.
set backspace=indent,eol,start
set ruler
set visualbell
set nofoldenable

set tabstop=2
set shiftwidth=2
set softtabstop=2
set smarttab
set expandtab

set incsearch
set hlsearch
set ignorecase

set nobackup
set nowritebackup
set noswapfile

"----------------------------------------------------
" Specialkey highlight
"----------------------------------------------------
set list
set listchars=tab:\_\_,trail:_
highlight SpecialKey cterm=underline ctermbg=darkgray guibg=darkgray

"----------------------------------------------------
" cursorline highlight
"----------------------------------------------------
set cursorline
hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline



setlocal omnifunc=syntaxcomplete#Complete
set pastetoggle=<F11>

" horizontally split on QuickRun
let g:quickrun_config = {
      \ '*': {
      \   'split': '',
      \   'running_mark': 'running quickrun... (  ﾟДﾟ)',
      \   'into': '1',
      \ },
      \ 'erlang': {
      \   'command': 'make',
      \   'exec': ['echo %c compile eunit', '%c compile eunit'] },
      \ }

" keymap
inoremap <C-j> <DOWN>
inoremap <C-k> <UP>
inoremap <C-l> <RIGHT>
inoremap <C-h> <LEFT>
inoremap <C-Space> <Esc>

nnoremap <C-h>     :<C-u>help<Space>
nnoremap <Space>.  :<C-u>edit $MYVIMRC<CR>
nnoremap <Space>s. :<C-u>source $MYVIMRC<CR>

" tab keymap
nnoremap <C-t> :tabedit<Return>
nnoremap <C-x> :tabclose<Return>
nnoremap <C-n> :tabnext<Return>
nnoremap <C-p> :tabprevious<Return> 

nnoremap <ESC><ESC> :nohlsearch<Return>
nnoremap <F2> :NERDTreeToggle<Return>
nnoremap <F3> :QuickRun<Return>

nnoremap ;; :Unite<Space>
nnoremap ;b :Unite buffer<Return>
nnoremap ;t :Unite tab<Return>
nnoremap ;f :Unite file_mru<Return>

nnoremap j gj
nnoremap k gk

"----------------------------------------------------
" ZenkakuSpace highlight
"----------------------------------------------------
if has('syntax')
  syntax enable
  function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=red gui=underline guifg=red
    silent! match ZenkakuSpace /　/
  endfunction
  augroup ZenkakuSpace
    autocmd!
    autocmd VimEnter,BufEnter * call ZenkakuSpace()
  augroup END
endif

"----------------------------------------------------
" NerdTree
"----------------------------------------------------
"let NERDTreeShowHidden=1
"let NERDTreeShowBookmarks=1
let NERDTreeWinSize=60

"----------------------------------------------------
" Neocomplecache
"----------------------------------------------------
source ~/dotfiles/vimrc.neocomplecache

"----------------------------------------------------
" smartchr
"----------------------------------------------------
inoremap <expr> = smartchr#one_of(' = ', ' == ', ' === ')
inoremap <expr> , smartchr#one_of(', ', ',')
inoremap <expr> ,<CR> smartchr#one_of(',<CR>')
inoremap <expr> => smartchr#one_of(' => ')
inoremap <expr> =><CR> smartchr#one_of(' =><CR>')
inoremap <expr> -> smartchr#one_of(' -> ')
inoremap <expr> -><CR> smartchr#one_of(' -><CR>')

"----------------------------------------------------
" GNU GLOBAL(gtags)
"----------------------------------------------------
nmap <C-q> <C-w><C-w><C-w>q
nmap <C-g> :Gtags -g 
nmap <C-l> :Gtags -f %<CR>
nmap <C-j> :Gtags <C-r><C-w><CR>
nmap <C-k> :Gtags -r <C-r><C-w><CR>
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>

"----------------------------------------------------
" Java autocmd
"----------------------------------------------------
function! JavaSetting()
  set noexpandtab

  compiler ant 
  set makeprg=mvn\ compile

  let java_mark_braces_in_parens_as_errors=1
  let java_highlight_java_all=1
  let java_highlight_functions="indent"

  noremap <F1> :update<CR>:make<CR><C-W>
  vmap \em :call ExtractMethod()<CR>
  function! ExtractMethod() range  
    let name = inputdialog("Name of new method:")
    '<
    exe "normal! O\<BS>private void " . name ."() {\<Esc>"
    '>  
    exe "normal! oreturn ;\<CR>}\<Esc>k"
    s/return/\/\/ return/ge
    normal! j%
    normal! kf( 
    exe "normal! yyPi// = \<Esc>wdwA;\<Esc>"
    normal! ==
    normal! j0w 
  endfunction
endfunction
autocmd! BufNewFile,BufRead *.java,pom.xml,*/src/main/resources/*,*/src/test/resources/*,*/src/main/webapp/* call JavaSetting()
autocmd! BufNewFile,BufRead *.ftl,*.vm,*jsp setfiletype html

"----------------------------------------------------
" Erlang configuration
"----------------------------------------------------
function! ErlangSetting()
  set tabstop=4
  set shiftwidth=4
  set softtabstop=4
  set makeprg=make\ compile
endfunction
autocmd! BufNewFile,BufRead *.app.src,rebar.config,reltool.config,sys.config,app.config setfiletype erlang
autocmd! FileType erlang call ErlangSetting()
